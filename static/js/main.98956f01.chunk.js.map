{"version":3,"sources":["helpers/getRandomColor.js","helpers/getDisplayType.js","components/NavBar/Upload/Upload.js","components/NavBar/NavHeader.js","components/NavBar/Layers/LayerManager.js","components/NavBar/Layers/Layers.js","helpers/operationFunctions.js","components/NavBar/Operations/OperationModal.js","helpers/propertyFilter.js","helpers/isNumber.js","helpers/getUniqueValues.js","components/NavBar/Operations/PropertyFilterModal.js","helpers/OperationList.js","components/NavBar/Operations/Operations.js","components/NavBar/NavBar.js","helpers/constructLayer.js","helpers/getCoords.js","helpers/getDescription.js","components/Map.js","ErrorBoundary.js","App.js","index.js"],"names":["getRandomColor","color","i","Math","floor","random","getDisplayType","data","type","features","geometry","Upload","addLayer","useState","show","setShow","handleClose","handleShow","onDrop","useCallback","allFiles","file","fileName","name","split","reader","FileReader","onabort","console","log","onerror","onload","jsonString","filename","GeoJSON","JSON","parse","newLayer","id","toString","addedToMap","displayType","convertJSONToLayer","result","readAsText","shp","then","json","readAsArrayBuffer","alert","useDropzone","getRootProps","getInputProps","isDragActive","Row","Col","md","onClick","Modal","onHide","Header","closeButton","Title","OverlayTrigger","trigger","placement","overlay","Popover","as","Content","style","margin","Body","borderStyle","textDecorationLine","Footer","Button","variant","NavHeader","className","size","LayerManager","map","layer","removeLayer","localColorIcon","setColor","localEyeIcon","setEye","setLayerName","toggleVisibility","layerId","getLayoutProperty","setLayoutProperty","overflow","Form","onSubmit","e","preventDefault","Group","controlId","Label","Control","onChange","target","value","event","rootClose","onChangeComplete","hex","setPaintProperty","Provider","Layers","lrs","dropdown","toggleDropdown","detailLevelHelper","union","OperationModal","operation","layerIds","setLayerIds","parameters","setParameters","validLayers","setValidLayers","useEffect","title","filter","handleSubmit","Object","values","length","bufferLayer","layer1","radius","newData","buffer","Buffer","find","layerList","addNewLayer","intersected","layer2","l1","l2","l1_modified","l2_modified","coordinates","c","polygon","f1","f2","is","intersect","push","Intersect","unionLayer","Union","diffLayer","difference","Difference","clusterLayer","clusterCount","clustersKmeans","numberOfClusters","Clustering","description","l","layers","required","default","entries","key","params","propertyFilter","featureList","property","operator","feature","properties","parseFloat","isNumber","n","replace","isNaN","isFinite","getUniqueValues","uniqueValues","forEach","includes","propertyOperation","operatorMap","PropertyFilterModal","setLayer","setProperty","setOperator","setValue","propertyValues","setPropertyValues","selectedLayer","handleLayerSelect","input","handlePropertyChange","prop","propType","op","undefined","val","valueCondtionalRender","filteredFeatureList","ffCollection","OperationList","Radius","Operations","navStyle","position","top","left","width","background","padding","zIndex","NavBar","Container","constructLayer","pointLayer","visibility","lineLayer","polygonLayer","getCoords","slice","getDescription","cluster","mapStyle","bottom","right","menuStyle","display","backgroundLayers","mapboxgl","accessToken","Map","setMap","backgroundLayerId","setBackgroundLayerId","setLayers","mapContainer","useRef","container","current","center","zoom","on","loadImage","error","image","addImage","resize","initializeMap","setStyle","addSource","abs","lngLat","lng","Popup","setLngLat","setHTML","addTo","getCanvas","cursor","updateMap","oldLayers","removeSource","backgroundLayer","bgId","stringify","changeBackgroundMap","defaultChecked","ref","el","ErrorBoundary","props","state","errorInfo","this","setState","whiteSpace","componentStack","children","React","Component","App","Application","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.98956f01.chunk.js","sourcesContent":["/**\n * Returns a random combination of 6 letters or numbers that make up a hex-color.\n */\nconst getRandomColor = () => {\n    var letters = '0123456789ABCDEF';\n    var color = '#';\n    for (var i = 0; i < 6; i++) {\n        color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n}\nexport default getRandomColor;","/**\n * This helper function assists in returning the type of layer the application is \n * dealing with.\n */\n\nconst getDisplayType = (data) => {\n    if (data.type === 'FeatureCollection') {\n        switch (data.features[0].geometry.type) {\n            case 'Point':\n            case 'MultiPoint':\n                return 'Point';\n            case 'Line':\n            case 'LineString':\n            case 'MultiLineString':\n                return 'Line';\n            case 'Polygon':\n            case 'MultiPolygon':\n                return 'Polygon';\n            default:\n                return 'Polygon';\n        }\n    } else if (data.type === 'Feature') {\n        switch (data.geometry.type) {\n            case 'Point':\n            case 'MultiPoint':\n                return 'Point';\n            case 'Line':\n            case 'LineString':\n            case 'MultiLineString':\n                return 'Point';\n            case 'Polygon':\n            case 'MultiPolygon':\n                return 'Polygon';\n            default:\n                return 'Polygon';\n        }\n    }\n    else {\n        return 'Polygon'\n    }\n}\n\nexport default getDisplayType;","/**\n * The input of the Upload component takes a function for adding a new layer.\n * The main funcitonality of the upload component is to dispay a modal where the user \n * can click or drag'n'drop files. \n * \n * The file type is check and this component adds the file contents to the map as a \n * layer.\n * \n * Necessary utility functionality includes the conversion from \"json -> layer\" and from\n * \"shapefile -> json -> layer\".\n */\n\nimport React, { useState, useCallback } from 'react'\nimport { FaUpload, FaInfoCircle } from 'react-icons/fa'\nimport { Row, Col, Modal, Button, Popover, OverlayTrigger } from 'react-bootstrap'\nimport { useDropzone } from 'react-dropzone'\nimport shp from 'shpjs'\n\nimport getRandomColor from '../../../helpers/getRandomColor'\nimport getDisplayType from '../../../helpers/getDisplayType'\n\nconst uploadHelp = \"Please upload a single file at a time. This application supports geojson and zipped shapefiles.\"\n\nconst Upload = ({ addLayer }) => {\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    const convertJSONToLayer = (jsonString, filename) => {\n        const GeoJSON = JSON.parse(jsonString);\n        const newLayer = {\n            id: (Math.floor(Math.random() * 1000)).toString(),\n            name: filename,\n            data: GeoJSON,\n            addedToMap: false,\n            color: getRandomColor(),\n            displayType: getDisplayType(GeoJSON)\n        }\n        addLayer(newLayer);\n    }\n\n    const onDrop = useCallback((allFiles) => {\n        const file = allFiles[0]\n        const fileName = file.name.split('.')\n\n        const reader = new FileReader()\n\n        reader.onabort = () => console.log('Reading was aborted')\n        reader.onerror = () => console.log('Reading has failed')\n        switch (fileName[1]) {\n            case 'geojson':\n                reader.onload = function () {\n                    convertJSONToLayer(reader.result, fileName[0])\n                }\n                reader.readAsText(file)\n                break;\n            case 'zip':\n                reader.onload = function () {\n                    shp(reader.result).then(function (json) {\n                        const newLayer = {\n                            id: (Math.floor(Math.random() * 10000)).toString(),\n                            name: fileName[0],\n                            data: json,\n                            addedToMap: false,\n                            color: getRandomColor(),\n                            displayType: getDisplayType(json)\n                        }\n                        addLayer(newLayer);\n                    })\n\n                }\n                reader.readAsArrayBuffer(file)\n                break;\n            default:\n                alert('Mons GIS only supports files of type geojson or zipped shapefile')\n        }\n\n    })\n\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\n    return (\n        <>\n            <Row>\n                <Col md={1}><FaUpload onClick={() => handleShow()} /></Col>\n                <Col md={7} onClick={() => handleShow()}>\n                    <h5>Upload</h5>\n                </Col>\n            </Row>\n            <Modal show={show} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Upload\n                        <OverlayTrigger\n                            trigger=\"hover\"\n                            key=\"right\"\n                            placement=\"right\"\n                            overlay={\n                                <Popover>\n                                    <Popover.Title as=\"h3\">Help</Popover.Title>\n                                    <Popover.Content>\n                                        {uploadHelp}\n                                    </Popover.Content>\n                                </Popover>\n                            }\n                        >\n                            <FaInfoCircle style={{ margin: 4 }} />\n                        </OverlayTrigger>\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div {...getRootProps()}>\n                        <input {...getInputProps()} />\n                        {\n                            isDragActive ?\n                                <p style={{ borderStyle: 'dotted' }}>Drop the file here ...</p> :\n                                <p style={{ textDecorationLine: 'underline' }}>Drag & drop a file here or click to select file</p>\n                        }\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Close\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    )\n}\nexport default Upload","/**\n * The Globe and Mons GIS header of the navigation bar. \n * \n * There is no functionality/logic in this component.\n */\n\nimport React from 'react'\nimport { FaGlobeAmericas, } from \"react-icons/fa\"\nimport { Row, Col } from \"react-bootstrap\"\n\nconst NavHeader = () => {\n    return (\n        <>\n            <Row className=\"strictRow\">\n                <Col md={2} >\n                    <FaGlobeAmericas size={32} />\n                </Col>\n                <Col md={8}>\n                    <h2> Mons GIS </h2>\n                </Col>\n                <Col md={2} />\n            </Row>\n        </>\n    )\n}\nexport default NavHeader","/**\n * The LayerManager component manages a layer.\n * \n * The layer manager renders different information depening on the layer it gets as \n * input. For example, it checks if a layer is a Point-layer or not, and removes the\n * option to change color if it is. A user is not able to change colors of a Point Layer\n * in Mons GIS, and should therefore not be given a false hope that he/she can.\n * \n * The component manages:\n *  - Visibility\n *  - Color\n *  - Deletion of layer\n * \n *  For each layer\n */\n\nimport React, { useState } from 'react'\nimport { Row, Col, OverlayTrigger, Popover, Form, Modal, Button } from \"react-bootstrap\"\nimport { IconContext } from \"react-icons\"\nimport { FaEye, FaEyeSlash, FaTimes, FaCircle } from 'react-icons/fa';\nimport { CirclePicker } from \"react-color\"\n\nconst LayerManager = ({ map, layer, removeLayer }) => {\n    const [localColorIcon, setColor] = useState(layer.color)\n    const [localEyeIcon, setEye] = useState(\"visible\")\n    const [layerName, setLayerName] = useState(layer.name)\n\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    const toggleVisibility = (layerId) => {\n        const visibility = map.getLayoutProperty(layerId, \"visibility\");\n        if (visibility === 'visible') {\n            map.setLayoutProperty(layerId, 'visibility', 'none');\n            setEye('none')\n        } else {\n            map.setLayoutProperty(layerId, 'visibility', 'visible')\n            setEye('visible')\n        }\n    };\n    const colorChange = (color, event) => {\n        setColor(color.hex)\n        layer.color = color.hex\n        switch (layer.displayType) {\n            case \"Point\":\n                map.setPaintProperty(layer.id, 'icon-color', color.hex)\n                break;\n            case \"Line\":\n                map.setPaintProperty(layer.id, 'line-color', color.hex)\n                break;\n            case \"Polygon\":\n                map.setPaintProperty(layer.id, \"fill-color\", color.hex)\n                break;\n            default:\n                map.setPaintProperty(layer.id, \"fill-color\", color.hex);\n                break;\n        }\n    };\n    const changeName = (name) => {\n        setLayerName(name)\n        layer.name = name\n    }\n    return (\n        <Row>\n            <Col md={1} />\n            <Col md={2}>{localEyeIcon === 'visible'\n                ? <FaEye onClick={() => {\n                    toggleVisibility(layer.id);\n                }} />\n                : <FaEyeSlash onClick={() => {\n                    toggleVisibility(layer.id)\n                }} />\n            }\n            </Col>\n            <Col md={4} style={{ overflow: 'auto' }} onClick={handleShow}>\n                {layer.name ? layer.name : layer.id}\n            </Col>\n            <Modal show={show} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Change Layer Name</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form onSubmit={e => e.preventDefault()}>\n                        <Form.Group key='nameChange' controlId='nameChange' >\n                            <Form.Label>New Name</Form.Label>\n                            <Form.Control type='string' onChange={(e) => changeName(e.target.value)} />\n                        </Form.Group>\n                    </Form>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Close\n                    </Button>\n                    <Button variant=\"primary\" type=\"submit\" onClick={(event) => {\n                        event.preventDefault()\n                        handleClose()\n                    }}>\n                        Change Name\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n            {layer.displayType === 'Point' ? <Col md={2} /> :\n                <OverlayTrigger\n                    trigger=\"click\"\n                    key=\"right\"\n                    rootClose\n                    placement=\"right\"\n                    overlay={\n                        <Popover>\n                            <Popover.Title as=\"h3\">Change layer color</Popover.Title>\n                            <Popover.Content>\n                                <CirclePicker color={localColorIcon} onChangeComplete={colorChange} />\n                            </Popover.Content>\n                        </Popover>\n                    }\n                >\n                    <Col md={2}>\n                        <IconContext.Provider value={{ color: localColorIcon }}>\n                            <FaCircle />\n                        </IconContext.Provider>\n                    </Col>\n                </OverlayTrigger>\n            }\n            <Col md={2}><FaTimes onClick={() => removeLayer(layer.id)} /></Col>\n        </Row>\n    )\n}\n\nexport default LayerManager;\n","/**\n * A simple component for listing all layers currently added to the map.\n * \n * This component manages the dropdown of layers visible to the user, and passes\n * information further down the component-tree.\n * \n * [Very similar to Operaitons.js]\n */\n\nimport React, { useState } from 'react'\nimport { Row, Col } from 'react-bootstrap'\nimport { RiArrowDropDownLine, RiArrowDropRightLine } from 'react-icons/ri'\nimport { FaBuffer } from 'react-icons/fa'\nimport LayerManager from \"./LayerManager.js\"\n\nconst Layers = ({ map, lrs, removeLayer }) => {\n    const [dropdown, toggleDropdown] = useState(false)\n\n    return (\n        <>\n            <Row >\n                <Col md={1}><FaBuffer onClick={() => toggleDropdown(!dropdown)} /></Col>\n                <Col md={7} onClick={() => toggleDropdown(!dropdown)}>\n                    <h5>Layers</h5>\n                </Col>\n                <Col md={3}>{dropdown\n                    ? <RiArrowDropDownLine size={20} onClick={() => toggleDropdown(!dropdown)} />\n                    : <RiArrowDropRightLine size={20} onClick={() => toggleDropdown(!dropdown)} />}\n                </Col>\n            </Row>\n            {\n                dropdown && lrs.map(layer => (\n                    <LayerManager key={layer.id} map={map} layer={layer} removeLayer={removeLayer} />\n                ))\n            }\n        </>\n    )\n}\n\nexport default Layers;","/**\n * This file contains all functions based on Turf. Each operation takes a layer and\n * releveant parameters as input, the transformation is done and a new layer is created.\n * The output is formated as a layer which can be added to a map.\n * \n * Mapbox is interested in the newData variable in each funciton, but to support the \n * level of user interaction I wanted - some parameters for each layer is also stored in\n * variables. That is:\n * \n * \"newData\" : GeoJSON (used by mapbox)\n * \"newLayer\": Object (used by Mons GIS to manage layers)\n * \n * The detailLevelHelper function either returns the feature as is, or joins multiple a\n * multi-x feature to a single feature by use of the union operation. This is to\n * decrease detail-level sensitivity of inputs to operations. (To make the same \n * operation work on different layer formats.)\n */\n\nimport difference from '@turf/difference'\nimport intersect from '@turf/intersect'\nimport buffer from '@turf/buffer'\nimport union from '@turf/union'\nimport { polygon } from '@turf/helpers'\nimport clustersKmeans from '@turf/clusters-kmeans'\nimport getRandomColor from './getRandomColor'\nimport getDisplayType from './getDisplayType'\n\nexport const Buffer = (layer1, radius) => {\n\n    var newData = buffer(layer1.data, radius)\n\n    const newLayer = {\n        id: 'Buff_' + layer1.name + (Math.floor(Math.random() * 1000)).toString(),\n        name: 'Buff_' + layer1.name,\n        data: newData,\n        addedToMap: false,\n        color: getRandomColor(),\n        displayType: getDisplayType(newData)\n    }\n    return newLayer\n}\nexport const Intersect = (layer1, layer2) => {\n    const l1 = detailLevelHelper(layer1.data)\n    const l2 = detailLevelHelper(layer2.data)\n\n    var l1_modified = []\n    var l2_modified = []\n\n    if (l1.geometry.type === 'MultiPolygon') {\n        l1_modified = l1.geometry.coordinates.map(c => polygon(c))\n    } else {\n        l1_modified = [l1]\n    }\n    if (l2.geometry.type === 'MultiPolygon') {\n        l2_modified = l2.geometry.coordinates.map(c => polygon(c))\n    } else {\n        l2_modified = [l2]\n    }\n\n    var newData = {\n        features: [],\n        type: 'FeatureCollection'\n    }\n    for (var f1 of l1_modified) {\n        for (var f2 of l2_modified) {\n            var is = intersect(f1, f2)\n            if (is) {\n                newData.features.push(is)\n            }\n        }\n    }\n\n    const newLayer = {\n        id: 'IS_' + layer1.name + '_' + layer2.name + (Math.floor(Math.random() * 1000)).toString(),\n        name: 'IS_' + layer1.name + '_' + layer2.name,\n        data: newData,\n        addedToMap: false,\n        color: getRandomColor(),\n        displayType: getDisplayType(newData)\n    }\n    return newLayer\n}\nexport const Union = (layer1, layer2) => {\n    const l1 = detailLevelHelper(layer1.data)\n    const l2 = detailLevelHelper(layer2.data)\n    var newData = union(l1, l2)\n\n    const newLayer = {\n        id: 'Union_' + layer1.name + '_' + layer2.name + (Math.floor(Math.random() * 1000)).toString(),\n        name: 'Union_' + layer1.name + '_' + layer2.name,\n        data: newData,\n        addedToMap: false,\n        color: getRandomColor(),\n        displayType: getDisplayType(newData)\n    }\n    return newLayer\n}\nexport const Difference = (layer1, layer2) => {\n    const l1 = detailLevelHelper(layer1.data)\n    const l2 = detailLevelHelper(layer2.data)\n    var newData = difference(l1, l2)\n\n    const newLayer = {\n        id: 'Diff_' + layer1.name + '_' + layer2.name + (Math.floor(Math.random() * 1000)).toString(),\n        name: 'Diff_' + layer1.name + '_' + layer2.name,\n        data: newData,\n        addedToMap: false,\n        color: getRandomColor(),\n        displayType: getDisplayType(newData)\n    }\n    return newLayer\n}\nexport const Clustering = (layer1, clusterCount) => {\n    var newData = clustersKmeans(layer1.data, { numberOfClusters: clusterCount })\n\n    const newLayer = {\n        id: 'Cluster_' + layer1.name + (Math.floor(Math.random() * 1000)).toString(),\n        name: 'Cluster_' + layer1.name,\n        data: newData,\n        addedToMap: false,\n        color: getRandomColor(),\n        displayType: getDisplayType(newData)\n    }\n    return newLayer\n}\n\nconst detailLevelHelper = (data) => {\n    switch (data.type) {\n        case 'FeatureCollection':\n            return union(...data.features)\n        case 'Feature':\n            return data\n        default:\n            return data\n    }\n}","/**\n * This component takes an operation, all layers and a funciton for adding a new layer\n * as input.\n * \n * The operation is one of those in OperationList. The OperationModal-component uses \n * this information to decide what to display in the modal.\n * \n * The layers are used to display available layers for manipulation. Not all layers are\n * valid for all operations, therefor this component benefits an function (useEfffect)\n * that removes invalid layers from this operation.\n * \n * The component should also be (at least) partially resistant to unlogical input data,\n * and has multiple checks for invalid input.\n * \n * When a form is submitted, this component manipulates/transformes the layer to a new \n * layer through the help of the switch funciton(handleSubmit). handleSubmit also adds\n * the new transformed layer to the map.\n */\nimport React, { useState, useEffect } from 'react'\nimport { Row, Button, Modal, Col, Form, Popover, OverlayTrigger } from 'react-bootstrap'\nimport { FaInfoCircle } from 'react-icons/fa'\nimport { Buffer, Intersect, Union, Difference, Clustering } from '../../../helpers/operationFunctions'\n\nconst OperationModal = ({ operation, lrs, addLayer }) => {\n    const [layerIds, setLayerIds] = useState({})\n    const [parameters, setParameters] = useState({})\n    const [show, setShow] = useState(false);\n    const [validLayers, setValidLayers] = useState(lrs)\n\n    useEffect(() => {\n        switch (operation.title) {\n            case 'Buffer':\n            default:\n                setValidLayers(lrs)\n                break;\n            case 'Intersect':\n                setValidLayers(lrs.filter(layer => layer.displayType === 'Polygon'))\n                break;\n            case 'Union':\n                setValidLayers(lrs.filter(layer => layer.displayType === 'Polygon'))\n                break;\n            case 'Difference':\n                setValidLayers(lrs.filter(layer => layer.displayType === 'Polygon'))\n                break;\n            case 'Clustering':\n                setValidLayers(lrs.filter(layer => layer.displayType === 'Point'))\n                break;\n        }\n    }, [operation, lrs])\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    const handleSubmit = (event) => {\n        if (Object.values(layerIds).filter(layer => layer === '---').length > 0) {\n            alert('Invalid layer selection')\n        } else {\n            switch (operation.title) {\n                case 'Buffer':\n                    const buff_l1 = lrs.find(layer => layer.id === layerIds[operation.layerList[0]])\n                    var bufferLayer = Buffer(buff_l1, parameters['Radius'])\n                    addNewLayer(event, bufferLayer)\n                    break;\n                case 'Intersect':\n                    const int_l1 = lrs.find(layer => layer.id === layerIds[operation.layerList[0]])\n                    const int_l2 = lrs.find(layer => layer.id === layerIds[operation.layerList[1]])\n                    var intersected = Intersect(int_l1, int_l2)\n                    addNewLayer(event, intersected)\n                    break;\n                case 'Union':\n                    const union_l1 = lrs.find(layer => layer.id === layerIds[operation.layerList[0]])\n                    const union_l2 = lrs.find(layer => layer.id === layerIds[operation.layerList[1]])\n                    var unionLayer = Union(union_l1, union_l2)\n                    addNewLayer(event, unionLayer)\n                    break;\n                case 'Difference':\n                    const diff_l1 = lrs.find(layer => layer.id === layerIds[operation.layerList[0]])\n                    const diff_l2 = lrs.find(layer => layer.id === layerIds[operation.layerList[1]])\n                    var diffLayer = Difference(diff_l1, diff_l2)\n                    addNewLayer(event, diffLayer)\n                    break;\n                case 'Clustering':\n                    const cluster_l1 = lrs.find(layer => layer.id === layerIds[operation.layerList[0]])\n                    var clusterLayer = Clustering(cluster_l1, parameters['Number of Clusters'])\n                    addNewLayer(event, clusterLayer)\n                    break;\n                default:\n                    alert(\"Defaulted\")\n                    break;\n            }\n        }\n    }\n    const addNewLayer = (event, newLayer) => {\n        if (newLayer) {\n            addLayer(newLayer)\n        } else {\n            alert(\"No resulting area\")\n        }\n        event.preventDefault()\n        setLayerIds([])\n    }\n\n    return (\n        <>\n            <Row>\n                <Col md={2} />\n                <Col md={6} onClick={handleShow}>\n                    {operation.title}\n                </ Col>\n                <Col md={3} onClick={handleShow} />\n            </Row>\n            <Modal show={show} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{operation.title}\n                        <OverlayTrigger\n                            trigger=\"hover\"\n                            key=\"right\"\n                            placement=\"right\"\n                            overlay={\n                                <Popover>\n                                    <Popover.Title as=\"h3\">Help</Popover.Title>\n                                    <Popover.Content>\n                                        {operation.description}\n                                    </Popover.Content>\n                                </Popover>\n                            }\n                        >\n                            <FaInfoCircle style={{ margin: 4 }} />\n                        </OverlayTrigger>\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form onSubmit={e => e.preventDefault()}>\n                        {operation.layerList.map((l) => {\n                            return (\n                                <Form.Group key={l} controlId={l} >\n                                    <Form.Label>Select {l}</Form.Label>\n                                    <Form.Control as=\"select\" onChange={(e) => setLayerIds((layers) => {\n                                        layers[l] = e.target.value\n                                        return layerIds\n                                    })} required>\n                                        <option key=\"blank\" default value={null}>---</option>\n                                        {validLayers.map(layer => (<option key={layer.id} value={layer.id}>{layer.name ? layer.name : layer.id}</option>))}\n                                    </Form.Control>\n                                </Form.Group>\n                            )\n                        })}\n                        {operation.parameters && Object.entries(operation.parameters).map(([key, value]) => {\n                            return (\n                                <Form.Group key={key} controlId={key.toString()} >\n                                    <Form.Label>{key.toString()}</Form.Label>\n                                    <Form.Control type={value} onChange={(e) => setParameters((params) => {\n                                        params[key] = e.target.value;\n                                        return params\n                                    })} />\n                                </Form.Group>\n                            )\n                        })}\n\n                    </Form>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Close\n                    </Button>\n                    <Button variant=\"primary\" type=\"submit\" onClick={(e) => {\n                        handleSubmit(e);\n                        handleClose()\n                    }}>\n                        Add Layer\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n}\n\nexport default OperationModal;","/**\n * @param {[List of all features]} featureList \n * @param {Name of property to filter by} property \n * @param {How to filter by property} operator \n * @param {What value the filter compares against} value \n * @returns All features that match the requirement.\n */\n\nconst propertyFilter = (featureList, property, operator, value) => {\n    if (typeof value === 'string') {\n        return featureList.filter(feature => feature.properties[property] === value)\n    } else {\n        switch (operator) {\n            case '=':\n                return featureList.filter(feature => parseFloat(feature.properties[property]) === value)\n            case '<=':\n                return featureList.filter(feature => parseFloat(feature.properties[property]) <= value)\n            case '>=':\n                return featureList.filter(feature => parseFloat(feature.properties[property]) >= value)\n            case '<':\n                return featureList.filter(feature => parseFloat(feature.properties[property]) < value)\n            case '>':\n                return featureList.filter(feature => parseFloat(feature.properties[property]) > value)\n            default:\n                alert(\"Operator not found, returns empty list.\")\n                return []\n        }\n    }\n\n}\n\nexport default propertyFilter;","/**\n * This funciton takes a variable as input and returns True/False based on wether the\n * variable is a number or not. The function is used to deal with numbers camouflaged as\n * strings in data sets. \n * @param {*} n \n * @returns boolean\n */\n\nconst isNumber = (n) => {\n    n = n.replace(',', '.');\n    return !isNaN(parseFloat(n)) && isFinite(n);\n}\nexport default isNumber;","/**\n * This funtion takes a layer as input and returns all unique values of a property that \n * is NOT a number. Only unique text values are stored as unique number values often \n * result in a very long list of numbers...\n * @params {layer} layer\n * @returns {Object}\n */\n\nimport isNumber from './isNumber'\n\nconst getUniqueValues = (layer) => {\n    const uniqueValues = {}\n    Object.entries(layer.data.features[0].properties).map(([key, value]) => {\n        uniqueValues[key] = [value]\n    })\n    layer.data.features.forEach(feature => {\n        Object.entries(feature.properties).forEach(([key, value]) => {\n            if (typeof value === 'string' && !isNumber(value)) {\n                if (!uniqueValues[key].includes(value)) {\n                    uniqueValues[key].push(value)\n                }\n            }\n        })\n    })\n    return uniqueValues;\n}\n\nexport default getUniqueValues","/**\n * This component takes all layers and a funciton for adding a new layer as input.\n * \n * The layers are used to display available layers for manipulation. The component \n * utilizes conditional rendinger (conditional display of input fields) baesd on input-\n * values earlier in the form. The idea is to help the user as much as possible in\n * creating the rules desired.\n * \n * The component should also be (at least) partially resistant to unlogical input data,\n * and has multiple checks for invalid input.\n * \n * When a form is submitted, the PropertyFilterModal-component utilizes helper-funcitons\n * to create a new layer with the features that match the criterea and adds this new\n * layer to the map.\n */\nimport React, { useState } from 'react'\nimport { Row, Button, Modal, Col, Form, Popover, OverlayTrigger } from 'react-bootstrap'\nimport { FaInfoCircle } from 'react-icons/fa'\n\nimport propertyFilter from '../../../helpers/propertyFilter'\nimport getRandomColor from '../../../helpers/getRandomColor'\nimport getUniqueValues from '../../../helpers/getUniqueValues'\nimport getDisplayType from '../../../helpers/getDisplayType'\nimport isNumber from '../../../helpers/isNumber'\n\nconst propertyOperation = {\n    id: 100,\n    title: 'Property Filter',\n    description: \"Creates a new layer with features that satisfy the user-defined rules. The allowed operators depend on the data type of the property selected.\"\n}\n\nconst operatorMap = {\n    'number': ['=', '>=', '<=', '<', '>'],\n    'string': ['=']\n}\n\nconst PropertyFilterModal = ({ lrs, addLayer }) => {\n    const [layer, setLayer] = useState()\n    const [property, setProperty] = useState()\n    const [operator, setOperator] = useState()\n    const [value, setValue] = useState()\n    const [show, setShow] = useState(false);\n    const [propertyValues, setPropertyValues] = useState({})\n\n    const handlePropertyChange = (input) => {\n        if (input === '---') {\n            setProperty();\n        } else {\n            const property = input.split(\",\")[0]\n            const value = input.split(\",\")[1]\n            if (isNumber(value)) {\n                setProperty([property, 'number'])\n            } else {\n                setProperty([property, typeof value])\n            }\n        }\n    }\n    const handleLayerSelect = (id) => {\n        if (id === '---') {\n            setLayer();\n            setPropertyValues();\n        } else {\n            const selectedLayer = lrs.find(layer => layer.id === id)\n            const uniqueValues = getUniqueValues(selectedLayer)\n\n            setLayer(selectedLayer)\n            setPropertyValues(uniqueValues)\n        }\n    }\n\n    const handleClose = () => {\n        setShow(false);\n        setLayer();\n        setProperty();\n        setOperator()\n        setValue()\n    }\n    const handleShow = () => setShow(true);\n\n    const handleSubmit = (event) => {\n        if (operator === '---' || !value) {\n            handleClose()\n            alert('Operator or value is invalid, please start again.')\n        } else {\n            const filteredFeatureList = propertyFilter(layer.data.features, property[0], operator, value)\n            if (filteredFeatureList.length === 0) {\n                alert('No features match the defined rules.')\n            } else {\n                const ffCollection = {\n                    type: 'FeatureCollection',\n                    features: filteredFeatureList\n                }\n                const newLayer = {\n                    id: layer.name + \"_filtered\" + (Math.floor(Math.random() * 1000)).toString(),\n                    name: layer.name + \"_filtered\",\n                    data: ffCollection,\n                    addedToMap: false,\n                    color: getRandomColor(),\n                    displayType: getDisplayType(ffCollection)\n                }\n                addLayer(newLayer)\n                event.preventDefault()\n                setLayer(undefined)\n            }\n        }\n\n    }\n\n    const valueCondtionalRender = (property) => {\n        switch (property[1]) {\n            case 'string':\n                return (\n                    <>\n                        <Form.Label>Select Value</Form.Label>\n                        <Form.Control as='select' onChange={(e) => setValue(e.target.value)} key=\"strValue\">\n                            <option key='blank' default value={undefined}>---</option>\n                            {propertyValues[property[0]].map(val => <option key={val} value={val}>{val}</option>)}\n                        </Form.Control>\n                    </>\n                )\n            case 'number':\n            default:\n                return (\n                    <>\n                        <Form.Label>Select Value</Form.Label>\n                        <Form.Control type={property[1]} onChange={(e) => setValue(parseFloat(e.target.value))} key=\"numValue\">\n                        </Form.Control>\n                    </>\n                )\n        }\n    }\n\n    return (\n        <>\n            <Row>\n                <Col md={2} />\n                <Col md={6} onClick={handleShow}>\n                    {propertyOperation.title}\n                </ Col>\n                <Col md={3} onClick={handleShow} />\n            </Row>\n            <Modal show={show} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{propertyOperation.title}\n                        <OverlayTrigger\n                            trigger='hover'\n                            key='right'\n                            placement='right'\n                            overlay={\n                                <Popover>\n                                    <Popover.Title as='h3'>Help</Popover.Title>\n                                    <Popover.Content>\n                                        {propertyOperation.description}\n                                    </Popover.Content>\n                                </Popover>\n                            }\n                        >\n                            <FaInfoCircle style={{ margin: 4 }} />\n                        </OverlayTrigger>\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form onSubmit={e => e.preventDefault()}>\n                        <Form.Group key=\"layer\" controlId=\"layer\" >\n                            <Form.Label>Select Layer</Form.Label>\n                            <Form.Control as='select' onChange={(e) => handleLayerSelect(e.target.value)} required>\n                                <option key='blank' default value={null}>---</option>\n                                {lrs.map(layer => (<option key={layer.id} value={layer.id}>{layer.name ? layer.name : layer.id}</option>))}\n                            </Form.Control>\n                        </Form.Group>\n                        <Form.Group controlId=\"filter\" >\n                            {layer &&\n                                <>\n                                    <Form.Label>Select Property</Form.Label>\n                                    <Form.Control as='select' onChange={(e) => handlePropertyChange(e.target.value)} key=\"property\" >\n                                        <option key='blank' default value={null}>---</option>\n                                        {\n                                            Object.entries(layer.data.features[0].properties).map(([prop, propType]) => (<option key={prop} value={[prop, propType]}>{prop}</option>))\n                                        }\n                                    </Form.Control>\n                                </>\n                            }\n                            {layer && property &&\n                                <>\n                                    <Form.Label>Select Operator</Form.Label>\n                                    <Form.Control as='select' onChange={(e) => setOperator(e.target.value)} key=\"operator\" >\n                                        <option key='blank' default value={null}>---</option>\n                                        {property[1] && operatorMap[property[1]].map(op => (<option key={op} value={op}>{op}</option>))}\n                                    </Form.Control>\n                                </>\n                            }\n                            {layer && property && operator && valueCondtionalRender(property)}\n                        </Form.Group>\n                    </Form>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant='secondary' onClick={handleClose}>\n                        Close\n                    </Button>\n                    <Button variant='primary' type='submit' onClick={(e) => {\n                        handleSubmit(e);\n                        handleClose()\n                    }}>\n                        Add Layer\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n}\n\nexport default PropertyFilterModal;","/**\n * This is a list of all standard operations where the turf library is used. This file has \n * performs no actions or modifies any data. In the operation list, each operation is \n * standardized to minimize the amount of code required to support new operations.\n *\n * To add a new turf operation to Mons GIS, one has to create a variable with the parameters:\n * - id\n * - title\n * - layerList (number of layers used in the operation)\n * - parameters (parameters and input type used in the operation)\n * - description\n * \n * This information is used to create a customized pop up with the desired input options. \n * \n * For more details on operations, check out in operationModal under components/Navbar.\n */\n\nvar buffer = {\n    id: 1,\n    title: 'Buffer',\n    layerList: ['Layer 1'],\n    parameters: { Radius: 'number' },\n    description: \"The Buffer Operation takes the features from a source vector layer and creates a buffer area of a specified distance around, storing the result on a Result Layer. The radius is specified in kilometers. Use '0.1' for decimals, commas ('0,1') are not accepted.\"\n}\nvar intersect = {\n    id: 2,\n    title: 'Intersect',\n    layerList: ['Layer 1', 'Layer 2'],\n    parameters: {},\n    description: \"The Intersect Operation calculates the geometric intersection of two layers.\"\n}\n\nvar union = {\n    id: 3,\n    title: 'Union',\n    layerList: ['Layer 1', 'Layer 2'],\n    parameters: {},\n    description: \"The Union Operation combines the features from two layers into a single, composite layer.\"\n}\n\nvar difference = {\n    id: 4,\n    title: 'Difference',\n    layerList: ['Layer 1', 'Layer 2'],\n    parameters: {},\n    description: \"The Difference Operation finds the difference between two polygons by clipping the second polygon from the first.\"\n}\nvar clustering = {\n    id: 5,\n    title: 'Clustering',\n    layerList: ['Layer 1'],\n    parameters: { 'Number of Clusters': 'number' },\n    description: \"The Clustering Operation takes a collection of points and returns the resulting K means clusters. The number of clusters required depends on your applicaiton.\"\n}\n\nconst OperationList = [buffer, intersect, union, difference, clustering]\n\nexport default OperationList","/**\n * A simple component for listing all operations Mons GIS supports.\n * \n * This component manages the dropdown of operations visible to the user, and passes\n * information further down the component-tree.\n * \n * [Very similar to Layers.js]\n */\n\nimport React, { useState } from 'react'\nimport { Row, Col } from 'react-bootstrap'\nimport { RiArrowDropDownLine, RiArrowDropRightLine } from 'react-icons/ri'\nimport { FaTools } from 'react-icons/fa'\n\nimport OperationModal from './OperationModal'\nimport PropertyFilterModal from './PropertyFilterModal'\nimport OperationList from '../../../helpers/OperationList'\n\nconst Operations = ({ lrs, addLayer }) => {\n    const [dropdown, toggleDropdown] = useState(false)\n    return (\n        <>\n            <Row >\n                <Col md={1}><FaTools /></Col>\n                <Col md={7} onClick={() => toggleDropdown(!dropdown)}>\n                    <h5>Operations</h5>\n                </Col>\n                <Col md={3}>{dropdown\n                    ? <RiArrowDropDownLine size={20} onClick={() => toggleDropdown(!dropdown)} />\n                    : <RiArrowDropRightLine size={20} onClick={() => toggleDropdown(!dropdown)} />}\n                </Col>\n            </Row>\n            {\n                dropdown && OperationList.map(op => (\n                    <OperationModal key={op.id} operation={op} lrs={lrs} addLayer={addLayer} />\n                ))\n            }\n            {dropdown && <PropertyFilterModal lrs={lrs} addLayer={addLayer} />}\n        </>\n    )\n}\n\nexport default Operations","/**\n * The NavBar component is a very simple component that merily decides what subsections\n * that is to be rendered in the side menu.\n * \n * In addition, the NavBar passes information from map to the child components (such as\n * Operations and Layers).\n */\n\nimport React from 'react'\nimport { Container, Col } from 'react-bootstrap'\nimport Upload from './Upload/Upload'\nimport NavHeader from './NavHeader'\nimport Layers from './Layers/Layers'\nimport Operations from './Operations/Operations'\n\nconst navStyle = {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    background: 'rgba(255,255,255,0.7)',\n    color: 'black',\n    padding: '1em',\n    margin: 10,\n    zIndex: '1',\n}\n\nconst NavBar = ({ map, lrs, addLayer, removeLayer }) => {\n\n    return (\n        <>\n            <Col md={3}>\n                <Container style={navStyle}>\n                    <NavHeader />\n                    <Operations lrs={lrs} addLayer={addLayer} />\n                    <Layers map={map} lrs={lrs} removeLayer={removeLayer} />\n                    <Upload addLayer={addLayer} />\n                </Container>\n            </Col>\n        </>\n    )\n}\nexport default NavBar","/** \n * This file returns the styling of a layer depending on the types of features the layer\n * consists of.\n * \n * The reason for the construct layer function is because points/lines/areas have\n * different properties and different types, such as: \"fill-color\" vs. \"line-color\".\n * \n * If a line is added to the map with: {type: fill, fill-color: red}, the line will\n * behave as if a polygon and try to fill the areas between the lines.\n */\n\nconst constructLayer = (layer) => {\n    var pointLayer = {\n        'id': layer.id,\n        'type': 'symbol',\n        'source': layer.id,\n        'layout': {\n            visibility: 'visible',\n            'icon-image': 'marker',\n            'icon-size': 0.08\n        },\n        'paint': {\n            'icon-color': 'white',\n        }\n    }\n    var lineLayer = {\n        'id': layer.id,\n        'type': 'line',\n        'source': layer.id,\n        'layout': {\n            visibility: 'visible'\n        },\n        'paint': {\n            'line-color': layer.color,\n            'line-width': 1\n        }\n    }\n    var polygonLayer = {\n        'id': layer.id,\n        'type': 'fill',\n        'source': layer.id,\n        'layout': {\n            visibility: 'visible'\n        },\n        'paint': {\n            'fill-color': layer.color,\n            'fill-opacity': 0.6\n        }\n    }\n    if (layer.data.type === 'FeatureCollection') {\n        if (layer.data.features.length === 0) {\n            alert('No features are present in this layer')\n            return polygonLayer\n        }\n        switch (layer.data.features[0].geometry.type) {\n            case 'Point':\n            case 'MultiPoint':\n                return pointLayer;\n            case 'Line':\n            case 'LineString':\n            case 'MultiLineString':\n                return lineLayer;\n            case 'Polygon':\n            case 'MultiPolygon':\n                return polygonLayer;\n            default:\n                return polygonLayer;\n        }\n    } else if (layer.data.type === 'Feature') {\n        switch (layer.data.geometry.type) {\n            case 'Point':\n            case 'MultiPoint':\n                return pointLayer;\n            case 'Line':\n            case 'LineString':\n            case 'MultiLineString':\n                return lineLayer;\n            case 'Polygon':\n            case 'MultiPolygon':\n                return polygonLayer;\n            default:\n                return polygonLayer;\n        }\n    }\n    else {\n        return polygonLayer\n    }\n}\n\nexport default constructLayer;","/**\n * This component return the coordinates of a point. It is used to display the pop-up\n * you can see when clicking a point in the map.\n */\n\nconst getCoords = (data) => {\n    switch (data.type) {\n        case 'Feature':\n            if (data.features.geometry.type === 'Point') {\n                return data.features.geometry.coordinates.slice()\n            } else {\n                return data.features.geometry.coordinates[0].slice()\n            }\n        case 'FeatureCollection':\n        default:\n            if (data.features[0].geometry.type === 'Point') {\n                return data.features[0].geometry.coordinates.slice()\n            } else {\n                return data.features[0].geometry.coordinates[0].slice()\n            }\n    }\n}\n\nexport default getCoords;","/**\n * This component returns the description of a point. It is used to retrieve information\n * you can see when clicking a point in the map.\n */\n\nconst getDescription = (data) => {\n    if (data.features[0].layer.id.split('_')[0] === 'Cluster') {\n        return 'Cluster ' + data.features[0].properties.cluster.toString()\n    }\n    switch (data.type) {\n        case 'Feature':\n            if (data.features.geometry.type === 'Point') {\n                return data.features.properties.description\n            } else {\n                return data.features[0].properties.description\n            }\n        case 'FeatureCollection':\n        default:\n            if (data.features[0].geometry.type === 'Point') {\n                return data.features[0].properties.description\n            } else {\n                return data.features[0].properties.description\n            }\n    }\n}\n\nexport default getDescription;","/**\n * This is the website's main file, which creates the map and manages layers.\n * \n * To summarize:\n * Maps and menus are given a defualt styling. \n * The basemap is set/managed in this file.\n * The map is initialized\n * Layers are added and removed\n * \n * Serves as the parent to all other components in the application.\n * \n * Distributes information to the navigation bar.\n */\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport NavBar from './NavBar/NavBar'\nimport constructLayer from './../helpers/constructLayer'\nimport getCoords from './../helpers/getCoords'\nimport getDescription from '../helpers/getDescription';\n\nconst mapStyle = {\n\tposition: 'absolute',\n\ttop: 0,\n\tbottom: 0,\n\tright: 0,\n\tleft: 0,\n\tzIndex: '-1',\n};\n\nconst menuStyle = {\n\tposition: 'absolute',\n\ttop: 0,\n\tright: 0,\n\tmargin: 10,\n\tpadding: 10,\n\tbackground: 'rgba(255,255,255,0.7)',\n\tzIndex: '1',\n\tdisplay: 'flex',\n};\n\nconst backgroundLayers = [\n\t{ id: 'light-v10', name: 'Light' },\n\t{ id: 'streets-v11', name: 'Streets' },\n\t{ id: 'dark-v10', name: 'Dark' },\n\t{ id: 'satellite-v9', name: 'Satellite' },\n];\n\nmapboxgl.accessToken = 'pk.eyJ1IjoibW9uc2VtIiwiYSI6ImNraG4yc2syaTBiZ24ydGwxOTg0ZnJiMG0ifQ.B3OT7lkRhmt4w5lTa9fJ2w'\n\nconst Map = () => {\n\tconst [map, setMap] = useState(null)\n\tconst [backgroundLayerId, setBackgroundLayerId] = useState('light-v10');\n\tconst [layers, setLayers] = useState([])\n\tconst mapContainer = useRef(null)\n\n\tuseEffect(() => {\n\t\tconst initializeMap = ({ setMap, mapContainer }) => {\n\t\t\tconst map = new mapboxgl.Map({\n\t\t\t\tcontainer: mapContainer.current,\n\t\t\t\tstyle: 'mapbox://styles/mapbox/light-v10', // stylesheet location\n\t\t\t\tcenter: [10.3856, 63.4292],\n\t\t\t\tzoom: 12.2\n\t\t\t});\n\t\t\tmap.on('load', () => {\n\t\t\t\t// funker ikke\n\t\t\t\tmap.loadImage('https://cdn4.iconfinder.com/data/icons/social-messaging-productivity-5/128/map-location-person-512.png',\n\t\t\t\t\tfunction (error, image) {\n\t\t\t\t\t\tif (error) throw error;\n\t\t\t\t\t\tmap.addImage('marker', image)\n\t\t\t\t\t})\n\t\t\t\tsetMap(map);\n\t\t\t\tmap.resize();\n\t\t\t});\n\t\t};\n\n\t\tif (!map) initializeMap({ setMap, mapContainer });\n\t\tif (map) map.setStyle('mapbox://styles/mapbox/' + backgroundLayerId);\n\t}, [backgroundLayerId, map]);\n\n\tuseEffect(() => {\n\t\tconst updateMap = (map, layers) => {\n\t\t\tlayers.filter((l) => !l.addedToMap)\n\t\t\t\t.forEach((layer) => {\n\t\t\t\t\tmap.addSource(layer.id, {\n\t\t\t\t\t\t'type': 'geojson',\n\t\t\t\t\t\t'data': layer.data\n\t\t\t\t\t});\n\t\t\t\t\tmap.addLayer(constructLayer(layer))\n\t\t\t\t\tlayer.addedToMap = true\n\t\t\t\t\tif (layer.displayType === 'Point') {\n\t\t\t\t\t\tmap.on('click', layer.id, function (e) {\n\t\t\t\t\t\t\tvar coordinates = getCoords(e)\n\t\t\t\t\t\t\t//e.features[0].geometry.coordinates.slice();\n\t\t\t\t\t\t\tvar description = getDescription(e)\n\t\t\t\t\t\t\t// Ensure that if the map is zoomed out such that multiple\n\t\t\t\t\t\t\t// copies of the feature are visible, the popup appears\n\t\t\t\t\t\t\t// over the copy being pointed to.\n\t\t\t\t\t\t\twhile (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n\t\t\t\t\t\t\t\tcoordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tnew mapboxgl.Popup()\n\t\t\t\t\t\t\t\t.setLngLat(coordinates)\n\t\t\t\t\t\t\t\t.setHTML(description)\n\t\t\t\t\t\t\t\t.addTo(map);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t// Change the cursor to a pointer when the mouse is over the places layer.\n\t\t\t\t\t\tmap.on('mouseenter', layer.id, function () {\n\t\t\t\t\t\t\tmap.getCanvas().style.cursor = 'pointer';\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t// Change it back to a pointer when it leaves.\n\t\t\t\t\t\tmap.on('mouseleave', layer.id, function () {\n\t\t\t\t\t\t\tmap.getCanvas().style.cursor = '';\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t}\n\t\tif (map && layers) updateMap(map, layers)\n\t}, [map, layers])\n\n\tconst addLayerToState = (layer) => {\n\t\tsetLayers((oldLayers) => [...oldLayers, layer]);\n\t}\n\tconst removeLayerFromState = (layerId) => {\n\t\tmap.removeLayer(layerId);\n\t\tmap.removeSource(layerId);\n\t\tsetLayers(layers => layers.filter(layer => layer.id !== layerId))\n\t}\n\tconst changeBackgroundMap = (bgId) => {\n\t\tconst oldLayers = JSON.parse(JSON.stringify(layers))\n\t\tsetBackgroundLayerId(bgId);\n\t\toldLayers.forEach(layer => {\n\t\t\tlayer.id = (Math.floor(Math.random() * 10000)).toString();\n\t\t\tlayer.addedToMap = false\n\t\t})\n\t\tsetLayers(oldLayers)\n\t}\n\tconst toggleVisibility = (layerId) => {\n\t\tconst visibility = map.getLayoutProperty(layerId, 'visibility');\n\t\tif (visibility === 'visible') {\n\t\t\tmap.setLayoutProperty(layerId, 'visibility', 'none');\n\t\t} else {\n\t\t\tmap.setLayoutProperty(layerId, 'visibility', 'visible')\n\t\t}\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<NavBar map={map} lrs={layers} addLayer={addLayerToState} removeLayer={removeLayerFromState} toggleVisibility={toggleVisibility} />\n\t\t\t<div style={menuStyle}>\n\t\t\t\t{backgroundLayers.map((backgroundLayer) => (\n\t\t\t\t\t<div key={backgroundLayer.id} style={{ margin: 4 }}>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tid={backgroundLayer.id}\n\t\t\t\t\t\t\ttype='radio'\n\t\t\t\t\t\t\tname='rtoggle'\n\t\t\t\t\t\t\tvalue={backgroundLayer.id}\n\t\t\t\t\t\t\tonClick={() => changeBackgroundMap(backgroundLayer.id)}\n\t\t\t\t\t\t\tdefaultChecked={backgroundLayer.id === backgroundLayerId}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<label style={{ margin: 2 }}>{backgroundLayer.name}</label>\n\t\t\t\t\t</div>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t\t<div ref={(el) => (mapContainer.current = el)} style={mapStyle} />\n\t\t</div>\n\t)\n\n}\nexport default Map;","import React from 'react'\n\nclass ErrorBoundary extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { error: null, errorInfo: null };\n    }\n\n    componentDidCatch(error, errorInfo) {\n        // Catch errors in any components below and re-render with error message\n        this.setState({\n            error: error,\n            errorInfo: errorInfo\n        })\n        // You can also log error messages to an error reporting service here\n    }\n\n    render() {\n        if (this.state.errorInfo) {\n            // Error path\n            return (\n                <div>\n                    <h2>Something went wrong.</h2>\n                    <details style={{ whiteSpace: 'pre-wrap' }}>\n                        {this.state.error && this.state.error.toString()}\n                        <br />\n                        {this.state.errorInfo.componentStack}\n                    </details>\n                </div>\n            );\n        }\n        // Normally, just render children\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary","import 'bootstrap/dist/css/bootstrap.min.css';\nimport Map from \"./components/Map\"\nimport ErrorBoundary from './ErrorBoundary'\n\nfunction App() {\n\treturn (\n\t\t<div>\n\t\t\t<ErrorBoundary>\n\t\t\t\t<Map />\n\t\t\t</ErrorBoundary>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from \"./App\"\n\nclass Application extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<App />\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nReactDOM.render(<Application />, document.getElementById('app'));"],"sourceRoot":""}