{"version":3,"sources":["helpers/getRandomColor.js","helpers/getDisplayType.js","components/NavBar/Upload/Upload.js","components/NavBar/NavHeader.js","components/NavBar/Layers/LayerManager.js","components/NavBar/Layers/Layers.js","helpers/operationFunctions.js","components/NavBar/Operations/OperationModal.js","helpers/propertyFilter.js","helpers/isNumber.js","helpers/getUniqueValues.js","components/NavBar/Operations/PropertyFilterModal.js","helpers/OperationList.js","components/NavBar/Operations/Operations.js","components/NavBar/NavBar.js","helpers/constructLayer.js","helpers/getCoords.js","helpers/getDescription.js","components/Map.js","ErrorBoundary.js","App.js","index.js"],"names":["getRandomColor","color","i","Math","floor","random","getDisplayType","data","type","features","geometry","Upload","addLayer","useState","show","setShow","handleClose","handleShow","onDrop","useCallback","allFiles","file","fileName","name","split","reader","FileReader","onabort","console","log","onerror","onload","jsonString","filename","GeoJSON","JSON","parse","newLayer","id","toString","addedToMap","displayType","convertJSONToLayer","result","readAsText","shp","then","json","readAsArrayBuffer","alert","useDropzone","getRootProps","getInputProps","isDragActive","Row","Col","md","onClick","Modal","onHide","Header","closeButton","Title","Body","style","borderStyle","textDecorationLine","Footer","Button","variant","NavHeader","className","size","LayerManager","map","layer","removeLayer","localColorIcon","setColor","localEyeIcon","setEye","toggleVisibility","layerId","getLayoutProperty","setLayoutProperty","overflow","OverlayTrigger","trigger","rootClose","placement","overlay","Popover","as","Content","onChangeComplete","event","hex","setPaintProperty","Provider","value","Layers","lrs","dropdown","toggleDropdown","detailLevelHelper","union","OperationModal","operation","layerIds","setLayerIds","parameters","setParameters","validLayers","setValidLayers","useEffect","title","filter","handleSubmit","Object","values","length","bufferLayer","layer1","radius","newData","buffer","Buffer","find","layerList","addNewLayer","intersected","layer2","l1","l2","intersect","Intersect","unionLayer","Union","diffLayer","difference","Difference","clusterLayer","clusterCount","clustersKmeans","numberOfClusters","Clustering","preventDefault","description","margin","Form","l","Group","controlId","Label","Control","onChange","e","layers","target","required","default","entries","key","params","propertyFilter","featureList","property","operator","feature","properties","parseFloat","isNumber","n","replace","isNaN","isFinite","getUniqueValues","uniqueValues","forEach","includes","push","propertyOperation","operatorMap","PropertyFilterModal","setLayer","setProperty","setOperator","setValue","propertyValues","setPropertyValues","selectedLayer","handleLayerSelect","input","handlePropertyChange","prop","propType","op","undefined","val","valueCondtionalRender","filteredFeatureList","ffCollection","OperationList","Radius","Operations","navStyle","position","top","left","width","background","padding","zIndex","NavBar","Container","constructLayer","pointLayer","visibility","lineLayer","polygonLayer","getCoords","coordinates","slice","getDescription","cluster","mapStyle","bottom","right","menuStyle","display","backgroundLayers","mapboxgl","accessToken","Map","setMap","backgroundLayerID","setbackgroundLayerID","setLayers","mapContainer","useRef","container","current","center","zoom","on","loadImage","error","image","addImage","resize","initializeMap","setStyle","addSource","abs","lngLat","lng","Popup","setLngLat","setHTML","addTo","getCanvas","cursor","updateMap","oldLayers","removeSource","backgroundLayer","defaultChecked","ref","el","ErrorBoundary","props","state","errorInfo","this","setState","whiteSpace","componentStack","children","React","Component","App","Application","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.53c392d1.chunk.js","sourcesContent":["const getRandomColor = () => {\n    var letters = '0123456789ABCDEF';\n    var color = '#';\n    for (var i = 0; i < 6; i++) {\n        color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n}\nexport default getRandomColor;","/**\n * \n * \n * @param {*} data \n */\n\nconst getDisplayType = (data) => {\n    if (data.type === 'FeatureCollection') {\n        switch (data.features[0].geometry.type) {\n            case 'Point':\n            case 'MultiPoint':\n                return 'Point';\n            case 'Line':\n            case 'LineString':\n            case 'MultiLineString':\n                return 'Line';\n            case 'Polygon':\n            case 'MultiPolygon':\n                return 'Polygon';\n            default:\n                return 'Polygon';\n        }\n    } else if (data.type === 'Feature') {\n        switch (data.geometry.type) {\n            case 'Point':\n            case 'MultiPoint':\n                return 'Point';\n            case 'Line':\n            case 'LineString':\n            case 'MultiLineString':\n                return 'Point';\n            case 'Polygon':\n            case 'MultiPolygon':\n                return 'Polygon';\n            default:\n                return 'Polygon';\n        }\n    }\n    else {\n        return 'Polygon'\n    }\n}\n\nexport default getDisplayType;","/**\n * \n */\n\nimport React, { useState, useCallback } from 'react'\nimport { FaUpload } from 'react-icons/fa'\nimport { Row, Col, Modal, Button } from 'react-bootstrap'\nimport { useDropzone } from 'react-dropzone'\nimport shp from 'shpjs'\n\nimport getRandomColor from '../../../helpers/getRandomColor'\nimport getDisplayType from '../../../helpers/getDisplayType'\n\nconst Upload = ({ addLayer }) => {\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    const convertJSONToLayer = (jsonString, filename) => {\n        const GeoJSON = JSON.parse(jsonString);\n        const newLayer = {\n            id: (Math.floor(Math.random() * 1000)).toString(),\n            name: filename,\n            data: GeoJSON,\n            addedToMap: false,\n            color: getRandomColor(),\n            displayType: getDisplayType(GeoJSON)\n        }\n        addLayer(newLayer);\n    }\n\n    const onDrop = useCallback((allFiles) => {\n        const file = allFiles[0]\n        const fileName = file.name.split('.')\n\n        const reader = new FileReader()\n\n        reader.onabort = () => console.log('Reading was aborted')\n        reader.onerror = () => console.log('Reading has failed')\n        switch (fileName[1]) {\n            case 'geojson':\n                reader.onload = function () {\n                    convertJSONToLayer(reader.result, fileName[0])\n                }\n                reader.readAsText(file)\n                break;\n            case 'zip':\n                reader.onload = function () {\n                    shp(reader.result).then(function (json) {\n                        const newLayer = {\n                            id: (Math.floor(Math.random() * 10000)).toString(),\n                            name: fileName[0],\n                            data: json,\n                            addedToMap: false,\n                            color: getRandomColor(),\n                            displayType: getDisplayType(json)\n                        }\n                        addLayer(newLayer);\n                    })\n\n                }\n                reader.readAsArrayBuffer(file)\n                break;\n            default:\n                alert('Mons GIS only supports files of type geojson or zipped shapefile')\n        }\n\n    })\n\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\n    return (\n        <>\n            <Row>\n                <Col md={1}><FaUpload onClick={() => handleShow()} /></Col>\n                <Col md={7} onClick={() => handleShow()}>\n                    <h5>Upload</h5>\n                </Col>\n            </Row>\n            <Modal show={show} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Upload</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div {...getRootProps()}>\n                        <input {...getInputProps()} />\n                        {\n                            isDragActive ?\n                                <p style={{ borderStyle: 'dotted' }}>Drop the files here ...</p> :\n                                <p style={{ textDecorationLine: 'underline' }}>Drag & drop files here or click to select files</p>\n                        }\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Close\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    )\n}\nexport default Upload","/**\n * The Globe and Mons GIS header of the navigation bar.\n */\n\nimport React from 'react'\nimport { FaGlobeAmericas, } from \"react-icons/fa\"\nimport { Row, Col } from \"react-bootstrap\"\n\nconst NavHeader = () => {\n    return (\n        <>\n            <Row className=\"strictRow\">\n                <Col md={2} >\n                    <FaGlobeAmericas size={32} />\n                </Col>\n                <Col md={8}>\n                    <h2> Mons GIS </h2>\n                </Col>\n                <Col md={2} />\n            </Row>\n        </>\n    )\n}\nexport default NavHeader","/**\n * The LayerManager component manages a layer.\n * \n * Each layer has its own LayerManager.\n * \n * The component manages:\n *  - Visibility\n *  - Color\n *  - Deletion of layer\n */\n\nimport React, { useState } from 'react'\nimport { Row, Col, OverlayTrigger, Popover } from \"react-bootstrap\"\nimport { IconContext } from \"react-icons\"\nimport { FaEye, FaEyeSlash, FaTimes, FaCircle } from 'react-icons/fa';\nimport { CirclePicker } from \"react-color\"\n\nconst LayerManager = ({ map, layer, removeLayer }) => {\n    const [localColorIcon, setColor] = useState(layer.color)\n    const [localEyeIcon, setEye] = useState(\"visible\")\n\n    const toggleVisibility = (layerId) => {\n        const visibility = map.getLayoutProperty(layerId, \"visibility\");\n        if (visibility === 'visible') {\n            map.setLayoutProperty(layerId, 'visibility', 'none');\n            setEye('none')\n        } else {\n            map.setLayoutProperty(layerId, 'visibility', 'visible')\n            setEye('visible')\n        }\n    };\n    const colorChange = (color, event) => {\n        setColor(color.hex)\n        layer.color = color.hex\n        switch (layer.displayType) {\n            case \"Point\":\n                map.setPaintProperty(layer.id, 'icon-color', color.hex)\n                break;\n            case \"Line\":\n                map.setPaintProperty(layer.id, 'line-color', color.hex)\n                break;\n            case \"Polygon\":\n                map.setPaintProperty(layer.id, \"fill-color\", color.hex)\n                break;\n            default:\n                map.setPaintProperty(layer.id, \"fill-color\", color.hex);\n                break;\n        }\n    };\n    return (\n        <Row>\n            <Col md={1} />\n            <Col md={2}>{localEyeIcon === 'visible'\n                ? <FaEye onClick={() => {\n                    toggleVisibility(layer.id);\n                }} />\n                : <FaEyeSlash onClick={() => {\n                    toggleVisibility(layer.id)\n                }} />\n            }\n            </Col>\n            <Col md={4} style={{ overflow: 'auto' }}>\n                {layer.name ? layer.name : layer.id}\n            </Col>\n            {layer.displayType === 'Point' ? <Col md={2} /> :\n                <OverlayTrigger\n                    trigger=\"click\"\n                    key=\"right\"\n                    rootClose\n                    placement=\"right\"\n                    overlay={\n                        <Popover>\n                            <Popover.Title as=\"h3\">Change layer color</Popover.Title>\n                            <Popover.Content>\n                                <CirclePicker color={localColorIcon} onChangeComplete={colorChange} />\n                            </Popover.Content>\n                        </Popover>\n                    }\n                >\n                    <Col md={2}>\n                        <IconContext.Provider value={{ color: localColorIcon }}>\n                            <FaCircle />\n                        </IconContext.Provider>\n                    </Col>\n                </OverlayTrigger>\n            }\n            <Col md={2}><FaTimes onClick={() => removeLayer(layer.id)} /></Col>\n        </Row>\n    )\n}\n\nexport default LayerManager;\n","/**\n * A simple component for listing all layers currently added to the map.\n * \n * This component manages the dropdown of layers visible to the user, and passes\n * information further down the component-tree.\n * \n * [Very similar to Operaitons.js]\n */\n\nimport React, { useState } from 'react'\nimport { Row, Col } from 'react-bootstrap'\nimport { RiArrowDropDownLine, RiArrowDropRightLine } from 'react-icons/ri'\nimport { FaBuffer } from 'react-icons/fa'\nimport LayerManager from \"./LayerManager.js\"\n\nconst Layers = ({ map, lrs, removeLayer }) => {\n    const [dropdown, toggleDropdown] = useState(false)\n\n    return (\n        <>\n            <Row >\n                <Col md={1}><FaBuffer onClick={() => toggleDropdown(!dropdown)} /></Col>\n                <Col md={7} onClick={() => toggleDropdown(!dropdown)}>\n                    <h5>Layers</h5>\n                </Col>\n                <Col md={3}>{dropdown\n                    ? <RiArrowDropDownLine size={20} onClick={() => toggleDropdown(!dropdown)} />\n                    : <RiArrowDropRightLine size={20} onClick={() => toggleDropdown(!dropdown)} />}\n                </Col>\n            </Row>\n            {\n                dropdown && lrs.map(layer => (\n                    <LayerManager key={layer.id} map={map} layer={layer} removeLayer={removeLayer} />\n                ))\n            }\n        </>\n    )\n}\n\nexport default Layers;","/**\n * This file contains all functions based on Turf. Each operation takes a layer and\n * releveant parameters as input, the transformation is done and a new layer is created.\n * The output is formated as a layer which can be added to a map.\n * \n * Mapbox is interested in the newData variable in each funciton, but to support the \n * level of user interaction I wanted - some parameters for each layer is also stored in\n * variables. That is:\n * \n * \"newData\" : GeoJSON (used by mapbox)\n * \"newLayer\": Object (used by Mons GIS to manage layers)\n * \n * The detailLevelHelper function either returns the feature as is, or joins multiple a\n * multi-x feature to a single feature by use of the union operation. This is to\n * decrease detail-level sensitivity of inputs to operations. (To make the same \n * operation work on different layer formats.)\n */\n\nimport difference from '@turf/difference'\nimport intersect from '@turf/intersect'\nimport buffer from '@turf/buffer'\nimport union from '@turf/union'\nimport clustersKmeans from '@turf/clusters-kmeans'\nimport getRandomColor from './getRandomColor'\nimport getDisplayType from './getDisplayType'\n\nexport const Buffer = (layer1, radius) => {\n\n    var newData = buffer(layer1.data, radius)\n\n    const newLayer = {\n        id: 'Buff_' + layer1.name + (Math.floor(Math.random() * 1000)).toString(),\n        name: 'Buff_' + layer1.name,\n        data: newData,\n        addedToMap: false,\n        color: getRandomColor(),\n        displayType: getDisplayType(newData)\n    }\n    return newLayer\n}\nexport const Intersect = (layer1, layer2) => {\n    const l1 = detailLevelHelper(layer1.data)\n    const l2 = detailLevelHelper(layer2.data)\n    var newData = intersect(l1, l2)\n\n    const newLayer = {\n        id: 'IS_' + layer1.name + '_' + layer2.name + (Math.floor(Math.random() * 1000)).toString(),\n        name: 'IS_' + layer1.name + '_' + layer2.name,\n        data: newData,\n        addedToMap: false,\n        color: getRandomColor(),\n        displayType: getDisplayType(newData)\n    }\n    return newLayer\n}\nexport const Union = (layer1, layer2) => {\n    const l1 = detailLevelHelper(layer1.data)\n    const l2 = detailLevelHelper(layer2.data)\n    var newData = union(l1, l2)\n\n    const newLayer = {\n        id: 'Union_' + layer1.name + '_' + layer2.name + (Math.floor(Math.random() * 1000)).toString(),\n        name: 'Union_' + layer1.name + '_' + layer2.name,\n        data: newData,\n        addedToMap: false,\n        color: getRandomColor(),\n        displayType: getDisplayType(newData)\n    }\n    return newLayer\n}\nexport const Difference = (layer1, layer2) => {\n    const l1 = detailLevelHelper(layer1.data)\n    const l2 = detailLevelHelper(layer2.data)\n    var newData = difference(l1, l2)\n\n    const newLayer = {\n        id: 'Diff_' + layer1.name + '_' + layer2.name + (Math.floor(Math.random() * 1000)).toString(),\n        name: 'Diff_' + layer1.name + '_' + layer2.name,\n        data: newData,\n        addedToMap: false,\n        color: getRandomColor(),\n        displayType: getDisplayType(newData)\n    }\n    return newLayer\n}\nexport const Clustering = (layer1, clusterCount) => {\n    var newData = clustersKmeans(layer1.data, { numberOfClusters: clusterCount })\n\n    const newLayer = {\n        id: 'Cluster_' + layer1.name + (Math.floor(Math.random() * 1000)).toString(),\n        name: 'Cluster_' + layer1.name,\n        data: newData,\n        addedToMap: false,\n        color: getRandomColor(),\n        displayType: getDisplayType(newData)\n    }\n    return newLayer\n}\n\nconst detailLevelHelper = (data) => {\n    switch (data.type) {\n        case 'FeatureCollection':\n            return union(...data.features)\n        case 'Feature':\n            return data\n        default:\n            return data\n    }\n}","import React, { useState, useEffect } from 'react'\nimport { Row, Button, Modal, Col, Form, Popover, OverlayTrigger } from 'react-bootstrap'\nimport { FaInfoCircle } from 'react-icons/fa'\nimport { Buffer, Intersect, Union, Difference, Clustering } from '../../../helpers/operationFunctions'\n\nconst OperationModal = ({ operation, lrs, addLayer }) => {\n    const [layerIds, setLayerIds] = useState({})\n    const [parameters, setParameters] = useState({})\n    const [show, setShow] = useState(false);\n    const [validLayers, setValidLayers] = useState(lrs)\n\n    useEffect(() => {\n        switch (operation.title) {\n            case 'Buffer':\n            default:\n                setValidLayers(lrs)\n                break;\n            case 'Intersect':\n                setValidLayers(lrs.filter(layer => layer.displayType === 'Polygon'))\n                break;\n            case 'Union':\n                setValidLayers(lrs.filter(layer => layer.displayType === 'Polygon'))\n                break;\n            case 'Difference':\n                setValidLayers(lrs.filter(layer => layer.displayType === 'Polygon'))\n                break;\n            case 'Clustering':\n                setValidLayers(lrs.filter(layer => layer.displayType === 'Point'))\n                break;\n        }\n    }, [operation, lrs])\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    const handleSubmit = (event) => {\n        if (Object.values(layerIds).filter(layer => layer === '---').length > 0) {\n            alert('Invalid layer selection')\n        } else {\n            switch (operation.title) {\n                case 'Buffer':\n                    const buff_l1 = lrs.find(layer => layer.id === layerIds[operation.layerList[0]])\n                    var bufferLayer = Buffer(buff_l1, parameters['Radius'])\n                    addNewLayer(event, bufferLayer)\n                    break;\n                case 'Intersect':\n                    const int_l1 = lrs.find(layer => layer.id === layerIds[operation.layerList[0]])\n                    const int_l2 = lrs.find(layer => layer.id === layerIds[operation.layerList[1]])\n                    var intersected = Intersect(int_l1, int_l2)\n                    addNewLayer(event, intersected)\n                    break;\n                case 'Union':\n                    const union_l1 = lrs.find(layer => layer.id === layerIds[operation.layerList[0]])\n                    const union_l2 = lrs.find(layer => layer.id === layerIds[operation.layerList[1]])\n                    var unionLayer = Union(union_l1, union_l2)\n                    addNewLayer(event, unionLayer)\n                    break;\n                case 'Difference':\n                    const diff_l1 = lrs.find(layer => layer.id === layerIds[operation.layerList[0]])\n                    const diff_l2 = lrs.find(layer => layer.id === layerIds[operation.layerList[1]])\n                    var diffLayer = Difference(diff_l1, diff_l2)\n                    addNewLayer(event, diffLayer)\n                    break;\n                case 'Clustering':\n                    const cluster_l1 = lrs.find(layer => layer.id === layerIds[operation.layerList[0]])\n                    var clusterLayer = Clustering(cluster_l1, parameters['Number of Clusters'])\n                    addNewLayer(event, clusterLayer)\n                    break;\n                default:\n                    alert(\"Defaulted\")\n                    break;\n            }\n        }\n    }\n    const addNewLayer = (event, newLayer) => {\n        if (newLayer) {\n            addLayer(newLayer)\n        } else {\n            alert(\"No resulting area\")\n        }\n        event.preventDefault()\n        setLayerIds([])\n    }\n\n    return (\n        <>\n            <Row>\n                <Col md={2} />\n                <Col md={6} onClick={handleShow}>\n                    {operation.title}\n                </ Col>\n                <Col md={3} onClick={handleShow} />\n            </Row>\n            <Modal show={show} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{operation.title}\n                        <OverlayTrigger\n                            trigger=\"hover\"\n                            key=\"right\"\n                            placement=\"right\"\n                            overlay={\n                                <Popover>\n                                    <Popover.Title as=\"h3\">Help</Popover.Title>\n                                    <Popover.Content>\n                                        {operation.description}\n                                    </Popover.Content>\n                                </Popover>\n                            }\n                        >\n                            <FaInfoCircle style={{ margin: 4 }} />\n                        </OverlayTrigger>\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form>\n                        {operation.layerList.map((l) => {\n                            return (\n                                <Form.Group key={l} controlId={l} >\n                                    <Form.Label>Select {l}</Form.Label>\n                                    <Form.Control as=\"select\" onChange={(e) => setLayerIds((layers) => {\n                                        layers[l] = e.target.value\n                                        return layerIds\n                                    })} required>\n                                        <option key=\"blank\" default value={null}>---</option>\n                                        {validLayers.map(layer => (<option key={layer.id} value={layer.id}>{layer.name ? layer.name : layer.id}</option>))}\n                                    </Form.Control>\n                                </Form.Group>\n                            )\n                        })}\n                        {operation.parameters && Object.entries(operation.parameters).map(([key, value]) => {\n                            return (\n                                <Form.Group key={key} controlId={key.toString()} >\n                                    <Form.Label>{key.toString()}</Form.Label>\n                                    <Form.Control type={value} onChange={(e) => setParameters((params) => {\n                                        params[key] = e.target.value;\n                                        return params\n                                    })} />\n                                </Form.Group>\n                            )\n                        })}\n\n                    </Form>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Close\n                    </Button>\n                    <Button variant=\"primary\" type=\"submit\" onClick={(e) => {\n                        handleSubmit(e);\n                        handleClose()\n                    }}>\n                        Add Layer\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n}\n\nexport default OperationModal;","/**\n * \n * @param {[List of all features]} featureList \n * @param {Name of property to filter by} property \n * @param {How to filter by property} operator \n * @param {What value the filter compares against} value \n * @returns All features that match the requirement.\n */\n\nconst propertyFilter = (featureList, property, operator, value) => {\n    if (typeof value === 'string') {\n        return featureList.filter(feature => feature.properties[property] === value)\n    } else {\n        switch (operator) {\n            case '=':\n                return featureList.filter(feature => parseFloat(feature.properties[property]) === value)\n            case '<=':\n                return featureList.filter(feature => parseFloat(feature.properties[property]) <= value)\n            case '>=':\n                return featureList.filter(feature => parseFloat(feature.properties[property]) >= value)\n            case '<':\n                return featureList.filter(feature => parseFloat(feature.properties[property]) < value)\n            case '>':\n                return featureList.filter(feature => parseFloat(feature.properties[property]) > value)\n            default:\n                alert(\"Operator not found, returns empty list.\")\n                return []\n        }\n    }\n\n}\n\nexport default propertyFilter;","/**\n * This funciton takes a variable as input and returns True/False based on wether the\n * variable is a number or not. The function is used to deal with numbers camouflaged as\n * strings in data sets. \n * @param {*} n \n * @returns boolean\n */\n\nconst isNumber = (n) => {\n    n = n.replace(',', '.');\n    return !isNaN(parseFloat(n)) && isFinite(n);\n}\nexport default isNumber;","/**\n * This funtion takes a layer as input and returns all unique values of a property that \n * is NOT a number. Only unique text values are stored as unique number values often \n * result in a very long list of numbers...\n * @params {layer} layer\n * @returns {Object}\n */\n\nimport isNumber from './isNumber'\n\nconst getUniqueValues = (layer) => {\n    const uniqueValues = {}\n    Object.entries(layer.data.features[0].properties).map(([key, value]) => {\n        uniqueValues[key] = [value]\n    })\n    layer.data.features.forEach(feature => {\n        Object.entries(feature.properties).forEach(([key, value]) => {\n            if (typeof value === 'string' && !isNumber(value)) {\n                if (!uniqueValues[key].includes(value)) {\n                    uniqueValues[key].push(value)\n                }\n            }\n        })\n    })\n    return uniqueValues;\n}\n\nexport default getUniqueValues","import React, { useState } from 'react'\nimport { Row, Button, Modal, Col, Form, Popover, OverlayTrigger } from 'react-bootstrap'\nimport { FaInfoCircle } from 'react-icons/fa'\n\nimport propertyFilter from '../../../helpers/propertyFilter'\nimport getRandomColor from '../../../helpers/getRandomColor'\nimport getUniqueValues from '../../../helpers/getUniqueValues'\nimport isNumber from '../../../helpers/isNumber'\n\nconst propertyOperation = {\n    id: 100,\n    title: 'Property Filter',\n    description: \"Creates a new layer with features that satisfy the user-defined rules. The allowed operators depend on the data type of the property selected.\"\n}\n\nconst operatorMap = {\n    'number': ['=', '>=', '<=', '<', '>'],\n    'string': ['=']\n}\n\nconst PropertyFilterModal = ({ lrs, addLayer }) => {\n    const [layer, setLayer] = useState()\n    const [property, setProperty] = useState()\n    const [operator, setOperator] = useState()\n    const [value, setValue] = useState()\n    const [show, setShow] = useState(false);\n    const [propertyValues, setPropertyValues] = useState({})\n\n    const handlePropertyChange = (input) => {\n        if (input === '---') {\n            setProperty();\n        } else {\n            const property = input.split(\",\")[0]\n            const value = input.split(\",\")[1]\n            if (isNumber(value)) {\n                setProperty([property, 'number'])\n            } else {\n                setProperty([property, typeof value])\n            }\n        }\n    }\n    const handleLayerSelect = (id) => {\n        if (id === '---') {\n            setLayer();\n            setPropertyValues();\n        } else {\n            const selectedLayer = lrs.find(layer => layer.id === id)\n            const uniqueValues = getUniqueValues(selectedLayer)\n\n            setLayer(selectedLayer)\n            setPropertyValues(uniqueValues)\n        }\n    }\n\n    const handleClose = () => {\n        setShow(false);\n        setLayer();\n        setProperty();\n        setOperator()\n        setValue()\n    }\n    const handleShow = () => setShow(true);\n\n    const handleSubmit = (event) => {\n        if (operator === '---' || !value) {\n            handleClose()\n            alert('Operator or value is invalid, please start again.')\n        } else {\n            const filteredFeatureList = propertyFilter(layer.data.features, property[0], operator, value)\n            if (filteredFeatureList.length === 0) {\n                alert('No features match the defined rules.')\n            } else {\n                const ffCollection = {\n                    type: 'FeatureCollection',\n                    features: filteredFeatureList\n                }\n                const newLayer = {\n                    id: layer.name + \"_filtered\" + (Math.floor(Math.random() * 1000)).toString(),\n                    name: layer.name + \"_filtered\",\n                    data: ffCollection,\n                    addedToMap: false,\n                    color: getRandomColor()\n                }\n                addLayer(newLayer)\n                event.preventDefault()\n                setLayer(undefined)\n            }\n        }\n\n    }\n\n    const valueCondtionalRender = (property) => {\n        console.log(property[1])\n        switch (property[1]) {\n            case 'string':\n                return (\n                    <>\n                        <Form.Label>Select Value</Form.Label>\n                        <Form.Control as='select' onChange={(e) => setValue(e.target.value)} key=\"strValue\">\n                            <option key='blank' default value={undefined}>---</option>\n                            {propertyValues[property[0]].map(val => <option key={val} value={val}>{val}</option>)}\n                        </Form.Control>\n                    </>\n                )\n            case 'number':\n            default:\n                return (\n                    <>\n                        <Form.Label>Select Value</Form.Label>\n                        <Form.Control type={property[1]} onChange={(e) => setValue(parseFloat(e.target.value))} key=\"numValue\">\n                        </Form.Control>\n                    </>\n                )\n        }\n    }\n\n    return (\n        <>\n            <Row>\n                <Col md={2} />\n                <Col md={6} onClick={handleShow}>\n                    {propertyOperation.title}\n                </ Col>\n                <Col md={3} onClick={handleShow} />\n            </Row>\n            <Modal show={show} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{propertyOperation.title}\n                        <OverlayTrigger\n                            trigger='hover'\n                            key='right'\n                            placement='right'\n                            overlay={\n                                <Popover>\n                                    <Popover.Title as='h3'>Help</Popover.Title>\n                                    <Popover.Content>\n                                        {propertyOperation.description}\n                                    </Popover.Content>\n                                </Popover>\n                            }\n                        >\n                            <FaInfoCircle style={{ margin: 4 }} />\n                        </OverlayTrigger>\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form>\n                        <Form.Group key=\"layer\" controlId=\"layer\" >\n                            <Form.Label>Select Layer</Form.Label>\n                            <Form.Control as='select' onChange={(e) => handleLayerSelect(e.target.value)} required>\n                                <option key='blank' default value={null}>---</option>\n                                {lrs.map(layer => (<option key={layer.id} value={layer.id}>{layer.name ? layer.name : layer.id}</option>))}\n                            </Form.Control>\n                        </Form.Group>\n                        <Form.Group controlId=\"filter\" >\n                            {layer &&\n                                <>\n                                    <Form.Label>Select Property</Form.Label>\n                                    <Form.Control as='select' onChange={(e) => handlePropertyChange(e.target.value)} key=\"property\" >\n                                        <option key='blank' default value={null}>---</option>\n                                        {\n                                            Object.entries(layer.data.features[0].properties).map(([prop, propType]) => (<option key={prop} value={[prop, propType]}>{prop}</option>))\n                                        }\n                                    </Form.Control>\n                                </>\n                            }\n                            {layer && property &&\n                                <>\n                                    <Form.Label>Select Operator</Form.Label>\n                                    <Form.Control as='select' onChange={(e) => setOperator(e.target.value)} key=\"operator\" >\n                                        <option key='blank' default value={null}>---</option>\n                                        {property[1] && operatorMap[property[1]].map(op => (<option key={op} value={op}>{op}</option>))}\n                                    </Form.Control>\n                                </>\n                            }\n                            {layer && property && operator && valueCondtionalRender(property)}\n                        </Form.Group>\n                    </Form>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant='secondary' onClick={handleClose}>\n                        Close\n                    </Button>\n                    <Button variant='primary' type='submit' onClick={(e) => {\n                        handleSubmit(e);\n                        handleClose()\n                    }}>\n                        Add Layer\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n}\n\nexport default PropertyFilterModal;","/**\n * This is a list of all standard operations where the turf library is used. This file has \n * performs no actions or modifies any data. In the operation list, each operation is \n * standardized to minimize the amount of code required to support new operations.\n *\n * To add a new turf operation to Mons GIS, one has to create a variable with the parameters:\n * - id\n * - title\n * - layerList (number of layers used in the operation)\n * - parameters (parameters and input type used in the operation)\n * - description\n * \n * This information is used to create a customized pop up with the desired input options. \n * \n * For more details on operations, check out in operationModal under components/Navbar.\n */\n\nvar buffer = {\n    id: 1,\n    title: 'Buffer',\n    layerList: ['Layer 1'],\n    parameters: { Radius: 'number' },\n    description: \"The Buffer Operation takes the features from a source vector layer and creates a buffer area of a specified distance around, storing the result on a Result Layer.\"\n}\nvar intersect = {\n    id: 2,\n    title: 'Intersect',\n    layerList: ['Layer 1', 'Layer 2'],\n    parameters: {},\n    description: \"The Intersect Operation calculates the geometric intersection of two layers.\"\n}\n\nvar union = {\n    id: 3,\n    title: 'Union',\n    layerList: ['Layer 1', 'Layer 2'],\n    parameters: {},\n    description: \"The Union Operation combines the features from two layers into a single, composite layer.\"\n}\n\nvar difference = {\n    id: 4,\n    title: 'Difference',\n    layerList: ['Layer 1', 'Layer 2'],\n    parameters: {},\n    description: \"The Difference Operation finds the difference between two polygons by clipping the second polygon from the first.\"\n}\nvar clustering = {\n    id: 5,\n    title: 'Clustering',\n    layerList: ['Layer 1'],\n    parameters: { 'Number of Clusters': 'number' },\n    description: \"The Clustering Operation takes a collection of points and returns the resulting K means clusters. The number of clusters required depends on your applicaiton.\"\n}\n\nconst OperationList = [buffer, intersect, union, difference, clustering]\n\nexport default OperationList","/**\n * A simple component for listing all operations Mons GIS supports.\n * \n * This component manages the dropdown of operations visible to the user, and passes\n * information further down the component-tree.\n * \n * [Very similar to Layers.js]\n */\n\nimport React, { useState } from 'react'\nimport { Row, Col } from 'react-bootstrap'\nimport { RiArrowDropDownLine, RiArrowDropRightLine } from 'react-icons/ri'\nimport { FaTools } from 'react-icons/fa'\n\nimport OperationModal from './OperationModal'\nimport PropertyFilterModal from './PropertyFilterModal'\nimport OperationList from '../../../helpers/OperationList'\n\nconst Operations = ({ lrs, addLayer }) => {\n    const [dropdown, toggleDropdown] = useState(false)\n    return (\n        <>\n            <Row >\n                <Col md={1}><FaTools /></Col>\n                <Col md={7} onClick={() => toggleDropdown(!dropdown)}>\n                    <h5>Operations</h5>\n                </Col>\n                <Col md={3}>{dropdown\n                    ? <RiArrowDropDownLine size={20} onClick={() => toggleDropdown(!dropdown)} />\n                    : <RiArrowDropRightLine size={20} onClick={() => toggleDropdown(!dropdown)} />}\n                </Col>\n            </Row>\n            {\n                dropdown && OperationList.map(op => (\n                    <OperationModal key={op.id} operation={op} lrs={lrs} addLayer={addLayer} />\n                ))\n            }\n            {dropdown && <PropertyFilterModal lrs={lrs} addLayer={addLayer} />}\n        </>\n    )\n}\n\nexport default Operations","import React from 'react'\nimport { Container, Col } from \"react-bootstrap\"\nimport Upload from \"./Upload/Upload\"\nimport NavHeader from \"./NavHeader\"\nimport Layers from \"./Layers/Layers\"\nimport Operations from \"./Operations/Operations\"\n\nconst navStyle = {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    width: \"100%\",\n    background: \"white\",\n    color: \"black\",\n    padding: \"1em\",\n    margin: 10,\n    zIndex: \"1\",\n}\n\nconst NavBar = ({ map, lrs, addLayer, removeLayer }) => {\n\n    return (\n        <>\n            <Col md={3}>\n                <Container style={navStyle}>\n                    <NavHeader />\n                    <Operations lrs={lrs} addLayer={addLayer} />\n                    <Layers map={map} lrs={lrs} removeLayer={removeLayer} />\n                    <Upload addLayer={addLayer} />\n                </Container>\n            </Col>\n        </>\n    )\n}\nexport default NavBar","/** \n * This file returns the styling of a layer depending on the types of features the layer\n * consists of.\n * \n * The reason for the construct layer function is because points/lines/areas have\n * different properties and different types, such as: \"fill-color\" vs. \"line-color\".\n * \n * If a line is added to the map with: {type: fill, fill-color: red}, the line will\n * behave as if a polygon and try to fill the areas between the lines.\n */\n\nconst constructLayer = (layer) => {\n    var pointLayer = {\n        'id': layer.id,\n        'type': 'symbol',\n        'source': layer.id,\n        'layout': {\n            visibility: 'visible',\n            'icon-image': 'marker',\n            'icon-size': 0.08\n        },\n        'paint': {\n            'icon-color': 'white',\n        }\n    }\n    var lineLayer = {\n        'id': layer.id,\n        'type': 'line',\n        'source': layer.id,\n        'layout': {\n            visibility: 'visible'\n        },\n        'paint': {\n            'line-color': layer.color,\n            'line-width': 1\n        }\n    }\n    var polygonLayer = {\n        'id': layer.id,\n        'type': 'fill',\n        'source': layer.id,\n        'layout': {\n            visibility: 'visible'\n        },\n        'paint': {\n            'fill-color': layer.color,\n            'fill-opacity': 0.6\n        }\n    }\n    if (layer.data.type === 'FeatureCollection') {\n        if (layer.data.features.length === 0) {\n            alert('No features are present in this layer')\n            return polygonLayer\n        }\n        console.log('constructLayer', layer)\n        switch (layer.data.features[0].geometry.type) {\n            case 'Point':\n            case 'MultiPoint':\n                return pointLayer;\n            case 'Line':\n            case 'LineString':\n            case 'MultiLineString':\n                return lineLayer;\n            case 'Polygon':\n            case 'MultiPolygon':\n                return polygonLayer;\n            default:\n                return polygonLayer;\n        }\n    } else if (layer.data.type === 'Feature') {\n        switch (layer.data.geometry.type) {\n            case 'Point':\n            case 'MultiPoint':\n                return pointLayer;\n            case 'Line':\n            case 'LineString':\n            case 'MultiLineString':\n                return lineLayer;\n            case 'Polygon':\n            case 'MultiPolygon':\n                return polygonLayer;\n            default:\n                return polygonLayer;\n        }\n    }\n    else {\n        return polygonLayer\n    }\n}\n\nexport default constructLayer;","const getCoords = (data) => {\n    switch (data.type) {\n        case 'Feature':\n            if (data.features.geometry.type === 'Point') {\n                return data.features.geometry.coordinates.slice()\n            } else {\n                return data.features.geometry.coordinates[0].slice()\n            }\n        case 'FeatureCollection':\n        default:\n            if (data.features[0].geometry.type === 'Point') {\n                return data.features[0].geometry.coordinates.slice()\n            } else {\n                return data.features[0].geometry.coordinates[0].slice()\n            }\n    }\n}\n\nexport default getCoords;","const getDescription = (data) => {\n    console.log('getdesc', data.features)\n    if (data.features[0].layer.id.split('_')[0] === 'Cluster') {\n        return 'Cluster ' + data.features[0].properties.cluster.toString()\n    }\n    switch (data.type) {\n        case 'Feature':\n            if (data.features.geometry.type === 'Point') {\n                return data.features.properties.description\n            } else {\n                return data.features[0].properties.description\n            }\n        case 'FeatureCollection':\n        default:\n            if (data.features[0].geometry.type === 'Point') {\n                return data.features[0].properties.description\n            } else {\n                return data.features[0].properties.description\n            }\n    }\n}\n\nexport default getDescription;","/**\n * This is the website's main file, which creates the map and manages layers.\n * \n * To summerize:\n * Maps and menus are given a defualt styling. \n * The basemap is set/managed in this file.\n * The map is initialized\n * Layers are added and removed\n * \n * Serves as the parent to all other components in the application.\n * \n * Distributes information to the navigation bar.\n */\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport NavBar from \"./NavBar/NavBar\"\nimport constructLayer from './../helpers/constructLayer'\nimport getCoords from './../helpers/getCoords'\nimport getDescription from '../helpers/getDescription';\n\nconst mapStyle = {\n\tposition: \"absolute\",\n\ttop: 0,\n\tbottom: 0,\n\tright: 0,\n\tleft: 0,\n\tzIndex: \"-1\",\n};\n\nconst menuStyle = {\n\tposition: \"absolute\",\n\ttop: 0,\n\tright: 0,\n\tmargin: 10,\n\tpadding: 10,\n\tbackground: \"white\",\n\tzIndex: \"1\",\n\tdisplay: \"flex\",\n};\n\nconst backgroundLayers = [\n\t{ id: \"streets-v11\", name: \"Streets\" },\n\t{ id: \"light-v10\", name: \"Light\" },\n\t{ id: \"dark-v10\", name: \"Dark\" },\n\t{ id: \"satellite-v9\", name: \"Satellite\" },\n];\n\nmapboxgl.accessToken = \"pk.eyJ1IjoibW9uc2VtIiwiYSI6ImNraG4yc2syaTBiZ24ydGwxOTg0ZnJiMG0ifQ.B3OT7lkRhmt4w5lTa9fJ2w\"\n\nconst Map = () => {\n\tconst [map, setMap] = useState(null)\n\tconst [backgroundLayerID, setbackgroundLayerID] = useState(\"streets-v11\");\n\tconst [layers, setLayers] = useState([])\n\tconst mapContainer = useRef(null)\n\n\tuseEffect(() => {\n\t\tconst initializeMap = ({ setMap, mapContainer }) => {\n\t\t\tconst map = new mapboxgl.Map({\n\t\t\t\tcontainer: mapContainer.current,\n\t\t\t\tstyle: \"mapbox://styles/mapbox/streets-v11\", // stylesheet location\n\t\t\t\tcenter: [10.3856, 63.4292],\n\t\t\t\tzoom: 12.2\n\t\t\t});\n\t\t\tmap.on(\"load\", () => {\n\t\t\t\tmap.loadImage('https://cdn4.iconfinder.com/data/icons/social-messaging-productivity-5/128/map-location-person-512.png',\n\t\t\t\t\tfunction (error, image) {\n\t\t\t\t\t\tif (error) throw error;\n\t\t\t\t\t\tmap.addImage('marker', image)\n\t\t\t\t\t})\n\t\t\t\tsetMap(map);\n\t\t\t\tmap.resize();\n\t\t\t});\n\t\t};\n\n\t\tif (!map) initializeMap({ setMap, mapContainer });\n\t\tif (map) map.setStyle(\"mapbox://styles/mapbox/\" + backgroundLayerID);\n\t}, [backgroundLayerID, map]);\n\n\tuseEffect(() => {\n\t\tconst updateMap = (map, layers) => {\n\t\t\tlayers.filter((l) => !l.addedToMap)\n\t\t\t\t.forEach((layer) => {\n\t\t\t\t\tmap.addSource(layer.id, {\n\t\t\t\t\t\t'type': 'geojson',\n\t\t\t\t\t\t'data': layer.data\n\t\t\t\t\t});\n\t\t\t\t\tmap.addLayer(constructLayer(layer));\n\t\t\t\t\tlayer.addedToMap = true;\n\t\t\t\t\tif (layer.displayType === 'Point') {\n\t\t\t\t\t\tmap.on('click', layer.id, function (e) {\n\t\t\t\t\t\t\tvar coordinates = getCoords(e)\n\t\t\t\t\t\t\t//e.features[0].geometry.coordinates.slice();\n\t\t\t\t\t\t\tvar description = getDescription(e)\n\t\t\t\t\t\t\t// Ensure that if the map is zoomed out such that multiple\n\t\t\t\t\t\t\t// copies of the feature are visible, the popup appears\n\t\t\t\t\t\t\t// over the copy being pointed to.\n\t\t\t\t\t\t\twhile (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n\t\t\t\t\t\t\t\tcoordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tnew mapboxgl.Popup()\n\t\t\t\t\t\t\t\t.setLngLat(coordinates)\n\t\t\t\t\t\t\t\t.setHTML(description)\n\t\t\t\t\t\t\t\t.addTo(map);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t// Change the cursor to a pointer when the mouse is over the places layer.\n\t\t\t\t\t\tmap.on('mouseenter', layer.id, function () {\n\t\t\t\t\t\t\tmap.getCanvas().style.cursor = 'pointer';\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t// Change it back to a pointer when it leaves.\n\t\t\t\t\t\tmap.on('mouseleave', layer.id, function () {\n\t\t\t\t\t\t\tmap.getCanvas().style.cursor = '';\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t})\n\t\t}\n\t\tif (map && layers) updateMap(map, layers)\n\t}, [layers, map])\n\n\n\tconst addLayerToState = (layer) => {\n\t\tsetLayers((oldLayers) => [...oldLayers, layer]);\n\t}\n\tconst removeLayerFromState = (layerId) => {\n\t\tmap.removeLayer(layerId);\n\t\tmap.removeSource(layerId);\n\t\tsetLayers(layers => layers.filter(layer => layer.id !== layerId))\n\t}\n\tconst removeAllLayers = () => {\n\t\tsetLayers([])\n\t}\n\tconst toggleVisibility = (layerId) => {\n\t\tconst visibility = map.getLayoutProperty(layerId, \"visibility\");\n\t\tif (visibility === 'visible') {\n\t\t\tmap.setLayoutProperty(layerId, 'visibility', 'none');\n\t\t} else {\n\t\t\tmap.setLayoutProperty(layerId, 'visibility', 'visible')\n\t\t}\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<NavBar map={map} lrs={layers} addLayer={addLayerToState} removeLayer={removeLayerFromState} toggleVisibility={toggleVisibility} />\n\t\t\t<div style={menuStyle}>\n\t\t\t\t{backgroundLayers.map((backgroundLayer) => (\n\t\t\t\t\t<div key={backgroundLayer.id} style={{ margin: 4 }}>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tid={backgroundLayer.id}\n\t\t\t\t\t\t\ttype=\"radio\"\n\t\t\t\t\t\t\tname=\"rtoggle\"\n\t\t\t\t\t\t\tvalue={backgroundLayer.id}\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tsetbackgroundLayerID(backgroundLayer.id);\n\t\t\t\t\t\t\t\tremoveAllLayers()\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tdefaultChecked={backgroundLayer.id === backgroundLayerID}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<label style={{ margin: 2 }}>{backgroundLayer.name}</label>\n\t\t\t\t\t</div>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t\t<div ref={(el) => (mapContainer.current = el)} style={mapStyle} />\n\t\t</div>\n\t)\n\n}\nexport default Map;","import React from 'react'\n\nclass ErrorBoundary extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { error: null, errorInfo: null };\n    }\n\n    componentDidCatch(error, errorInfo) {\n        // Catch errors in any components below and re-render with error message\n        this.setState({\n            error: error,\n            errorInfo: errorInfo\n        })\n        // You can also log error messages to an error reporting service here\n    }\n\n    render() {\n        if (this.state.errorInfo) {\n            // Error path\n            return (\n                <div>\n                    <h2>Something went wrong.</h2>\n                    <details style={{ whiteSpace: 'pre-wrap' }}>\n                        {this.state.error && this.state.error.toString()}\n                        <br />\n                        {this.state.errorInfo.componentStack}\n                    </details>\n                </div>\n            );\n        }\n        // Normally, just render children\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary","import 'bootstrap/dist/css/bootstrap.min.css';\nimport Map from \"./components/Map\"\nimport ErrorBoundary from './ErrorBoundary'\n\nfunction App() {\n\treturn (\n\t\t<div>\n\t\t\t<ErrorBoundary>\n\t\t\t\t<Map />\n\t\t\t</ErrorBoundary>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from \"./App\"\n\nclass Application extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<App />\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nReactDOM.render(<Application />, document.getElementById('app'));"],"sourceRoot":""}