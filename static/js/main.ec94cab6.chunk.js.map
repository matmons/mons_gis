{"version":3,"sources":["helpers/getRandomColor.js","helpers/getDisplayType.js","components/NavBar/Upload/Upload.js","components/NavBar/NavHeader.js","components/NavBar/Layers/LayerManager.js","components/NavBar/Layers/Layers.js","helpers/operationFunctions.js","components/NavBar/Operations/OperationModal.js","helpers/propertyFilter.js","helpers/isNumber.js","helpers/getUniqueValues.js","components/NavBar/Operations/PropertyFilterModal.js","helpers/OperationList.js","components/NavBar/Operations/Operations.js","components/NavBar/NavBar.js","helpers/constructLayer.js","components/Map.js","App.js","index.js"],"names":["getRandomColor","color","i","Math","floor","random","getDisplayType","data","console","log","type","features","geometry","Upload","addLayer","useState","show","setShow","handleClose","handleShow","onDrop","useCallback","allFiles","file","fileName","name","split","reader","FileReader","onabort","onerror","onload","jsonString","filename","GeoJSON","JSON","parse","newLayer","id","toString","addedToMap","displayType","convertJSONToLayer","result","readAsText","shp","then","json","readAsArrayBuffer","alert","useDropzone","getRootProps","getInputProps","isDragActive","Row","Col","md","onClick","Modal","onHide","Header","closeButton","Title","Body","Footer","Button","variant","NavHeader","className","size","LayerManager","map","layer","removeLayer","localColorIcon","setColor","localEyeIcon","setEye","toggleVisibility","layerId","getLayoutProperty","setLayoutProperty","style","overflow","OverlayTrigger","trigger","placement","overlay","Popover","as","Content","onChangeComplete","event","hex","setPaintProperty","Provider","value","Layers","lrs","dropdown","toggleDropdown","detailLevelHelper","union","OperationModal","operation","layerIds","setLayerIds","parameters","setParameters","handleSubmit","title","bufferLayer","layer1","radius","buff","buffer","Buffer","find","layerList","addNewLayer","intersected","layer2","l1","l2","intersectLayer","intersect","Intersect","unionLayer","Union","diffLayer","diff","difference","Difference","clusterLayer","clusterCount","cluster","clustersKmeans","numberOfClusters","Clustering","preventDefault","description","margin","Form","l","Group","controlId","Label","Control","onChange","e","layers","target","required","default","Object","entries","key","params","propertyFilter","featureList","property","operator","filter","feature","properties","parseFloat","isNumber","n","replace","isNaN","isFinite","getUniqueValues","uniqueValues","forEach","includes","push","propertyOperation","operatorMap","PropertyFilterModal","setLayer","setProperty","setOperator","setValue","propertyValues","setPropertyValues","selectedLayer","handleLayerSelect","input","handlePropertyChange","prop","propType","op","undefined","val","valueCondtionalRender","filteredFeatureList","ffCollection","OperationList","Radius","Operations","navStyle","position","top","left","width","background","padding","zIndex","NavBar","Container","constructLayer","pointLayer","visibility","lineLayer","polygonLayer","mapStyle","bottom","right","menuStyle","display","backgroundLayers","mapboxgl","accessToken","Map","setMap","backgroundLayerID","setbackgroundLayerID","setLayers","mapContainer","useRef","useEffect","container","current","center","zoom","on","resize","initializeMap","setStyle","addSource","updateMap","oldLayers","removeSource","backgroundLayer","defaultChecked","ref","el","App","Application","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ec94cab6.chunk.js","sourcesContent":["const getRandomColor = () => {\n    var letters = '0123456789ABCDEF';\n    var color = '#';\n    for (var i = 0; i < 6; i++) {\n        color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n}\nexport default getRandomColor;","/**\n * \n * \n * @param {*} data \n */\n\nconst getDisplayType = (data) => {\n    console.log(data)\n    if (data.type === 'FeatureCollection') {\n        switch (data.features[0].geometry.type) {\n            case 'Point':\n            case 'MultiPoint':\n                return \"Point\";\n            case 'Line':\n            case 'LineString':\n            case 'MultiLineString':\n                return \"Line\";\n            case 'Polygon':\n            case 'MultiPolygon':\n                return \"Polygon\";\n            default:\n                return \"Polygon\";\n        }\n    } else if (data.type === 'Feature') {\n        switch (data.geometry.type) {\n            case 'Point':\n            case 'MultiPoint':\n                return \"Point\";\n            case 'Line':\n            case 'LineString':\n            case 'MultiLineString':\n                return \"Point\";\n            case 'Polygon':\n            case 'MultiPolygon':\n                return \"Polygon\";\n            default:\n                return \"Polygon\";\n        }\n    }\n    else {\n        return \"Polygon\"\n    }\n}\n\nexport default getDisplayType;","/**\n * \n */\n\nimport React, { useState, useCallback } from 'react'\nimport { FaUpload } from 'react-icons/fa'\nimport { Row, Col, Modal, Button } from 'react-bootstrap'\nimport { useDropzone } from 'react-dropzone'\nimport shp from 'shpjs'\n\nimport getRandomColor from '../../../helpers/getRandomColor'\nimport getDisplayType from '../../../helpers/getDisplayType'\n\nconst Upload = ({ addLayer }) => {\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    const convertJSONToLayer = (jsonString, filename) => {\n        const GeoJSON = JSON.parse(jsonString);\n        const newLayer = {\n            id: (Math.floor(Math.random() * 1000)).toString(),\n            name: filename,\n            data: GeoJSON,\n            addedToMap: false,\n            color: getRandomColor(),\n            displayType: getDisplayType(GeoJSON)\n        }\n        addLayer(newLayer);\n    }\n\n    const onDrop = useCallback((allFiles) => {\n        const file = allFiles[0]\n        const fileName = file.name.split('.')\n\n        const reader = new FileReader()\n\n        reader.onabort = () => console.log('Reading was aborted')\n        reader.onerror = () => console.log('Reading has failed')\n        switch (fileName[1]) {\n            case 'geojson':\n                reader.onload = function () {\n                    convertJSONToLayer(reader.result, fileName[0])\n                }\n                reader.readAsText(file)\n                break;\n            case 'zip':\n                reader.onload = function () {\n                    shp(reader.result).then(function (json) {\n                        console.log(json)\n                        const newLayer = {\n                            id: (Math.floor(Math.random() * 10000)).toString(),\n                            name: fileName[0],\n                            data: json,\n                            addedToMap: false,\n                            color: getRandomColor(),\n                            displayType: getDisplayType(json)\n                        }\n                        addLayer(newLayer);\n                    })\n\n                }\n                reader.readAsArrayBuffer(file)\n                break;\n            default:\n                alert('Mons GIS only supports files of type geojson or zipped shapefile')\n        }\n\n    })\n\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\n    return (\n        <>\n            <Row>\n                <Col md={1}><FaUpload onClick={() => handleShow()} /></Col>\n                <Col md={7} onClick={() => handleShow()}>\n                    <h5>Upload</h5>\n                </Col>\n            </Row>\n            <Modal show={show} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Upload</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div {...getRootProps()}>\n                        <input {...getInputProps()} />\n                        {\n                            isDragActive ?\n                                <p>Drop the files here ...</p> :\n                                <p>Drag & drop files here or click to select files</p>\n                        }\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Close\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    )\n}\nexport default Upload","/**\n * The Globe and Mons GIS header of the navigation bar.\n */\n\nimport React from 'react'\nimport { FaGlobeAmericas, } from \"react-icons/fa\"\nimport { Row, Col } from \"react-bootstrap\"\n\nconst NavHeader = () => {\n    return (\n        <>\n            <Row className=\"strictRow\">\n                <Col md={2} >\n                    <FaGlobeAmericas size={32} />\n                </Col>\n                <Col md={8}>\n                    <h2> Mons GIS </h2>\n                </Col>\n                <Col md={2} />\n            </Row>\n        </>\n    )\n}\nexport default NavHeader","/**\n * The LayerManager component manages a layer.\n * \n * Each layer has its own LayerManager.\n * \n * The component manages:\n *  - Visibility\n *  - Color\n *  - Deletion of layer\n */\n\nimport React, { useState } from 'react'\nimport { Row, Col, OverlayTrigger, Popover } from \"react-bootstrap\"\nimport { IconContext } from \"react-icons\"\nimport { FaEye, FaEyeSlash, FaTimes, FaCircle } from 'react-icons/fa';\nimport { CirclePicker } from \"react-color\"\n\nconst LayerManager = ({ map, layer, removeLayer }) => {\n    const [localColorIcon, setColor] = useState(layer.color)\n    const [localEyeIcon, setEye] = useState(\"visible\")\n\n    const toggleVisibility = (layerId) => {\n        const visibility = map.getLayoutProperty(layerId, \"visibility\");\n        if (visibility === 'visible') {\n            map.setLayoutProperty(layerId, 'visibility', 'none');\n            setEye('none')\n        } else {\n            map.setLayoutProperty(layerId, 'visibility', 'visible')\n            setEye('visible')\n        }\n    };\n    const colorChange = (color, event) => {\n        setColor(color.hex)\n        layer.color = color.hex\n        switch (layer.displayType) {\n            case \"Line\":\n                map.setPaintProperty(layer.id, 'line-color', color.hex)\n                break;\n            case \"Polygon\":\n                map.setPaintProperty(layer.id, \"fill-color\", color.hex)\n                break;\n            default:\n                map.setPaintProperty(layer.id, \"fill-color\", color.hex);\n                break;\n        }\n    };\n    return (\n        <Row>\n            <Col md={1} />\n            <Col md={2}>{localEyeIcon === 'visible'\n                ? <FaEye onClick={() => {\n                    toggleVisibility(layer.id);\n                }} />\n                : <FaEyeSlash onClick={() => {\n                    toggleVisibility(layer.id)\n                }} />\n            }\n            </Col>\n            <Col md={4} style={{ overflow: 'auto' }}>\n                {layer.name ? layer.name : layer.id}\n            </Col>\n            <OverlayTrigger\n                trigger=\"click\"\n                key=\"right\"\n                placement=\"right\"\n                overlay={\n                    <Popover>\n                        <Popover.Title as=\"h3\">Change layer color</Popover.Title>\n                        <Popover.Content>\n                            <CirclePicker color={localColorIcon} onChangeComplete={colorChange} />\n                        </Popover.Content>\n                    </Popover>\n                }\n            >\n                <Col md={2}>\n                    <IconContext.Provider value={{ color: localColorIcon }}>\n                        <FaCircle />\n                    </IconContext.Provider>\n                </Col>\n            </OverlayTrigger>\n\n            <Col md={2}><FaTimes onClick={() => removeLayer(layer.id)} /></Col>\n        </Row>\n    )\n}\n\nexport default LayerManager;\n","/**\n * A simple component for listing all layers currently added to the map.\n * \n * This component manages the dropdown of layers visible to the user, and passes\n * information further down the component-tree.\n * \n * [Very similar to Operaitons.js]\n */\n\nimport React, { useState } from 'react'\nimport { Row, Col } from 'react-bootstrap'\nimport { RiArrowDropDownLine, RiArrowDropRightLine } from 'react-icons/ri'\nimport { FaBuffer } from 'react-icons/fa'\nimport LayerManager from \"./LayerManager.js\"\n\nconst Layers = ({ map, lrs, removeLayer }) => {\n    const [dropdown, toggleDropdown] = useState(false)\n\n    return (\n        <>\n            <Row >\n                <Col md={1}><FaBuffer onClick={() => toggleDropdown(!dropdown)} /></Col>\n                <Col md={7} onClick={() => toggleDropdown(!dropdown)}>\n                    <h5>Layers</h5>\n                </Col>\n                <Col md={3}>{dropdown\n                    ? <RiArrowDropDownLine size={20} onClick={() => toggleDropdown(!dropdown)} />\n                    : <RiArrowDropRightLine size={20} onClick={() => toggleDropdown(!dropdown)} />}\n                </Col>\n            </Row>\n            {\n                dropdown && lrs.map(layer => (\n                    <LayerManager key={layer.id} map={map} layer={layer} removeLayer={removeLayer} />\n                ))\n            }\n        </>\n    )\n}\n\nexport default Layers;","/**\n * This file contains all functions based on Turf. Each operation takes a layer and\n * releveant parameters as input, the transformation is done and a new layer is created.\n * The output is formated as a layer which can be added to a map.\n */\n\nimport difference from '@turf/difference'\nimport intersect from '@turf/intersect'\nimport buffer from '@turf/buffer'\nimport union from '@turf/union'\nimport clustersKmeans from '@turf/clusters-kmeans'\nimport getRandomColor from './getRandomColor'\n\nexport const Buffer = (layer1, radius) => {\n\n    var buff = buffer(layer1.data, radius)\n\n    const newLayer = {\n        id: 'Buff_' + layer1.name,\n        name: 'Buff_' + layer1.name,\n        data: buff,\n        addedToMap: false,\n        color: getRandomColor()\n    }\n    return newLayer\n}\nexport const Intersect = (layer1, layer2) => {\n    const l1 = detailLevelHelper(layer1.data)\n    const l2 = detailLevelHelper(layer2.data)\n    var intersectLayer = intersect(l1, l2)\n\n    const newLayer = {\n        id: 'IS_' + layer1.name + '_' + layer2.name,\n        name: 'IS_' + layer1.name + '_' + layer2.name,\n        data: intersectLayer,\n        addedToMap: false,\n        color: getRandomColor()\n    }\n    return newLayer\n}\nexport const Union = (layer1, layer2) => {\n    var unionLayer = union(layer1.data, layer2.data)\n\n    const newLayer = {\n        id: 'Union_' + layer1.name + '_' + layer2.name,\n        name: 'Union_' + layer1.name + '_' + layer2.name,\n        data: unionLayer,\n        addedToMap: false,\n        color: getRandomColor()\n    }\n    return newLayer\n}\nexport const Difference = (layer1, layer2) => {\n    const l1 = detailLevelHelper(layer1.data)\n    const l2 = detailLevelHelper(layer2.data)\n    console.log(l1, l2)\n    var diff = difference(l1, l2)\n\n    const newLayer = {\n        id: 'Diff_' + layer1.name + '_' + layer2.name,\n        name: 'Diff_' + layer1.name + '_' + layer2.name,\n        data: diff,\n        addedToMap: false,\n        color: getRandomColor()\n    }\n    return newLayer\n}\nexport const Clustering = (layer1, clusterCount) => {\n    var cluster = clustersKmeans(layer1.data, { numberOfClusters: clusterCount })\n\n    const newLayer = {\n        id: 'Cluster_' + layer1.name,\n        name: 'Cluster_' + layer1.name,\n        data: cluster,\n        addedToMap: false,\n        color: getRandomColor()\n    }\n    return newLayer\n}\n\nconst detailLevelHelper = (data) => {\n    switch (data.type) {\n        case 'FeatureCollection':\n            return union(...data.features)\n        case 'Feature':\n            return data\n        default:\n            return data\n    }\n}","import React, { useState } from 'react'\nimport { Row, Button, Modal, Col, Form, Popover, OverlayTrigger } from 'react-bootstrap'\nimport { FaInfoCircle } from 'react-icons/fa'\nimport { Buffer, Intersect, Union, Difference, Clustering } from '../../../helpers/operationFunctions'\n\nconst OperationModal = ({ operation, lrs, addLayer }) => {\n    const [layerIds, setLayerIds] = useState({})\n    const [parameters, setParameters] = useState({})\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    const handleSubmit = (event) => {\n        switch (operation.title) {\n            case 'Buffer':\n                const buff_l1 = lrs.find(layer => layer.id === layerIds[operation.layerList[0]])\n                var bufferLayer = Buffer(buff_l1, parameters['Radius'])\n                addNewLayer(event, bufferLayer)\n                break;\n            case 'Intersect':\n                const int_l1 = lrs.find(layer => layer.id === layerIds[operation.layerList[0]])\n                const int_l2 = lrs.find(layer => layer.id === layerIds[operation.layerList[1]])\n                var intersected = Intersect(int_l1, int_l2)\n                addNewLayer(event, intersected)\n                break;\n            case 'Union':\n                const union_l1 = lrs.find(layer => layer.id === layerIds[operation.layerList[0]])\n                const union_l2 = lrs.find(layer => layer.id === layerIds[operation.layerList[1]])\n                var unionLayer = Union(union_l1, union_l2)\n                addNewLayer(event, unionLayer)\n                break;\n            case 'Difference':\n                const diff_l1 = lrs.find(layer => layer.id === layerIds[operation.layerList[0]])\n                const diff_l2 = lrs.find(layer => layer.id === layerIds[operation.layerList[1]])\n                var diffLayer = Difference(diff_l1, diff_l2)\n                addNewLayer(event, diffLayer)\n                break;\n            case 'Cluster':\n                const cluster_l1 = lrs.find(layer => layer.id === layerIds[operation.layerList[0]])\n                var clusterLayer = Clustering(cluster_l1, parameters['Number of Clusters'])\n                addNewLayer(event, clusterLayer)\n                break;\n            default:\n                alert(\"Defaulted\")\n                break;\n        }\n    }\n    const addNewLayer = (event, newLayer) => {\n        if (newLayer) {\n            addLayer(newLayer)\n        } else {\n            alert(\"No resulting area\")\n        }\n        event.preventDefault()\n        setLayerIds([])\n    }\n\n    return (\n        <>\n            <Row>\n                <Col md={2} />\n                <Col md={6} onClick={handleShow}>\n                    {operation.title}\n                </ Col>\n                <Col md={3} onClick={handleShow} />\n            </Row>\n            <Modal show={show} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{operation.title}\n                        <OverlayTrigger\n                            trigger=\"hover\"\n                            key=\"right\"\n                            placement=\"right\"\n                            overlay={\n                                <Popover>\n                                    <Popover.Title as=\"h3\">Help</Popover.Title>\n                                    <Popover.Content>\n                                        {operation.description}\n                                    </Popover.Content>\n                                </Popover>\n                            }\n                        >\n                            <FaInfoCircle style={{ margin: 4 }} />\n                        </OverlayTrigger>\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form>\n                        {operation.layerList.map((l) => {\n                            return (\n                                <Form.Group key={l} controlId={l} >\n                                    <Form.Label>Select {l}</Form.Label>\n                                    <Form.Control as=\"select\" onChange={(e) => setLayerIds((layers) => {\n                                        layers[l] = e.target.value\n                                        return layerIds\n                                    })} required>\n                                        <option key=\"blank\" default value={null}>---</option>\n                                        {lrs.map(layer => (<option key={layer.id} value={layer.id}>{layer.name ? layer.name : layer.id}</option>))}\n                                    </Form.Control>\n                                </Form.Group>\n                            )\n                        })}\n                        {operation.parameters && Object.entries(operation.parameters).map(([key, value]) => {\n                            return (\n                                <Form.Group key={key} controlId={key.toString()} >\n                                    <Form.Label>{key.toString()}</Form.Label>\n                                    <Form.Control type={value} onChange={(e) => setParameters((params) => {\n                                        params[key] = e.target.value;\n                                        console.log(e.target.value)\n                                        return params\n                                    })} />\n                                </Form.Group>\n                            )\n                        })}\n\n                    </Form>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Close\n                    </Button>\n                    <Button variant=\"primary\" type=\"submit\" onClick={(e) => {\n                        handleSubmit(e);\n                        handleClose()\n                    }}>\n                        Add Layer\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n}\n\nexport default OperationModal;","/**\n * \n * @param {[List of all features]} featureList \n * @param {Name of property to filter by} property \n * @param {How to filter by property} operator \n * @param {What value the filter compares against} value \n * @returns All features that match the requirement.\n */\n\nconst propertyFilter = (featureList, property, operator, value) => {\n    if (typeof value === 'string') {\n        return featureList.filter(feature => feature.properties[property] === value)\n    } else {\n        switch (operator) {\n            case '=':\n                return featureList.filter(feature => parseFloat(feature.properties[property]) === value)\n            case '<=':\n                return featureList.filter(feature => parseFloat(feature.properties[property]) <= value)\n            case '>=':\n                return featureList.filter(feature => parseFloat(feature.properties[property]) >= value)\n            case '<':\n                return featureList.filter(feature => parseFloat(feature.properties[property]) < value)\n            case '>':\n                return featureList.filter(feature => parseFloat(feature.properties[property]) > value)\n            default:\n                alert(\"Operator not found, returns empty list.\")\n                return []\n        }\n    }\n\n}\n\nexport default propertyFilter;","/**\n * This funciton takes a variable as input and returns True/False based on wether the\n * variable is a number or not. The function is used to deal with numbers camouflaged as\n * strings in data sets. \n * @param {*} n \n * @returns boolean\n */\n\nconst isNumber = (n) => {\n    n = n.replace(',', '.');\n    return !isNaN(parseFloat(n)) && isFinite(n);\n}\nexport default isNumber;","/**\n * This funtion takes a layer as input and returns all unique values of a property that \n * is NOT a number. Only unique text values are stored as unique number values often \n * result in a very long list of numbers...\n * @params {layer} layer\n * @returns {Object}\n */\n\nimport isNumber from './isNumber'\n\nconst getUniqueValues = (layer) => {\n    const uniqueValues = {}\n    Object.entries(layer.data.features[0].properties).map(([key, value]) => {\n        uniqueValues[key] = [value]\n    })\n    layer.data.features.forEach(feature => {\n        Object.entries(feature.properties).forEach(([key, value]) => {\n            if (typeof value === 'string' && !isNumber(value)) {\n                if (!uniqueValues[key].includes(value)) {\n                    uniqueValues[key].push(value)\n                }\n            }\n        })\n    })\n    return uniqueValues;\n}\n\nexport default getUniqueValues","import React, { useState } from 'react'\nimport { Row, Button, Modal, Col, Form, Popover, OverlayTrigger } from 'react-bootstrap'\nimport { FaInfoCircle } from 'react-icons/fa'\n\nimport propertyFilter from '../../../helpers/propertyFilter'\nimport getRandomColor from '../../../helpers/getRandomColor'\nimport getUniqueValues from '../../../helpers/getUniqueValues'\nimport isNumber from '../../../helpers/isNumber'\n\nconst propertyOperation = {\n    id: 100,\n    title: 'Property Filter',\n    description: \"Creates a new layer with features that satisfy the user-defined rules. The allowed operators depend on the data type of the property selected.\"\n}\n\nconst operatorMap = {\n    'number': ['=', '>=', '<=', '<', '>'],\n    'string': ['=']\n}\n\nconst PropertyFilterModal = ({ lrs, addLayer }) => {\n    const [layer, setLayer] = useState()\n    const [property, setProperty] = useState()\n    const [operator, setOperator] = useState()\n    const [value, setValue] = useState()\n    const [show, setShow] = useState(false);\n    const [propertyValues, setPropertyValues] = useState({})\n\n    const handlePropertyChange = (input) => {\n        console.log(input)\n        const property = input.split(\",\")[0]\n        const value = input.split(\",\")[1]\n        if (isNumber(value)) {\n            setProperty([property, 'number'])\n        } else {\n            setProperty([property, typeof value])\n        }\n\n    }\n    const handleLayerSelect = (id) => {\n        console.log(\"id\", id)\n        if (id === '---') {\n            setLayer();\n            setPropertyValues();\n        } else {\n            const selectedLayer = lrs.find(layer => layer.id === id)\n            const uniqueValues = getUniqueValues(selectedLayer)\n            console.log(uniqueValues)\n            // Object.entries(uniqueValues).forEach(([key, value]) => {\n            //     uniqueValues[key] = value.sort((a, b) => a - b)\n            // });\n            setLayer(selectedLayer)\n            setPropertyValues(uniqueValues)\n        }\n    }\n\n    const handleClose = () => {\n        setShow(false);\n        setLayer();\n        setProperty();\n        setOperator()\n        setValue()\n\n    }\n    const handleShow = () => setShow(true);\n\n    const handleSubmit = (event) => {\n        const filteredFeatureList = propertyFilter(layer.data.features, property[0], operator, value)\n        console.log(\"ffl\", filteredFeatureList)\n        const ffCollection = {\n            type: 'FeatureCollection',\n            features: filteredFeatureList\n        }\n        const newLayer = {\n            id: layer.name + \"_filtered\",\n            name: layer.name + \"_filtered\",\n            data: ffCollection,\n            addedToMap: false,\n            color: getRandomColor()\n\n        }\n        addLayer(newLayer)\n        event.preventDefault()\n        setLayer(undefined)\n    }\n\n    const valueCondtionalRender = (property) => {\n        switch (property[1]) {\n            case 'string':\n                return (\n                    <>\n                        <Form.Label>Select Value</Form.Label>\n                        <Form.Control as='select' onChange={(e) => setValue(e.target.value)} key=\"value\">\n                            <option key='blank' default value={undefined}>---</option>\n                            {propertyValues[property[0]].map(val => <option key={val} value={val}>{val}</option>)}\n                        </Form.Control>\n                    </>\n                )\n            case 'number':\n            default:\n                return (\n                    <>\n                        <Form.Label>Select Value</Form.Label>\n                        <Form.Control type={property[1]} onChange={(e) => setValue(e.target.value)} key=\"value\">\n                        </Form.Control>\n                    </>\n                )\n        }\n    }\n\n    return (\n        <>\n            <Row>\n                <Col md={2} />\n                <Col md={6} onClick={handleShow}>\n                    {propertyOperation.title}\n                </ Col>\n                <Col md={3} onClick={handleShow} />\n            </Row>\n            <Modal show={show} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{propertyOperation.title}\n                        <OverlayTrigger\n                            trigger='hover'\n                            key='right'\n                            placement='right'\n                            overlay={\n                                <Popover>\n                                    <Popover.Title as='h3'>Help</Popover.Title>\n                                    <Popover.Content>\n                                        {propertyOperation.description}\n                                    </Popover.Content>\n                                </Popover>\n                            }\n                        >\n                            <FaInfoCircle style={{ margin: 4 }} />\n                        </OverlayTrigger>\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form>\n                        <Form.Group key=\"layer\" controlId=\"layer\" >\n                            <Form.Label>Select Layer</Form.Label>\n                            <Form.Control as='select' onChange={(e) => handleLayerSelect(e.target.value)} required>\n                                <option key='blank' default value={null}>---</option>\n                                {lrs.map(layer => (<option key={layer.id} value={layer.id}>{layer.name ? layer.name : layer.id}</option>))}\n                            </Form.Control>\n                        </Form.Group>\n                        <Form.Group controlId=\"filter\" >\n                            {layer &&\n                                <>\n                                    <Form.Label>Select Property</Form.Label>\n                                    <Form.Control as='select' onChange={(e) => handlePropertyChange(e.target.value)} key=\"property\" >\n                                        <option key='blank' default value={null}>---</option>\n                                        {\n                                            Object.entries(layer.data.features[0].properties).map(([prop, propType]) => (<option key={prop} value={[prop, propType]}>{prop}</option>))\n                                        }\n                                    </Form.Control>\n                                </>\n                            }\n                            {layer && property &&\n                                <>\n                                    <Form.Label>Select Operator</Form.Label>\n                                    <Form.Control as='select' onChange={(e) => setOperator(e.target.value)} key=\"operator\" >\n                                        <option key='blank' default value={null}>---</option>\n                                        {property[1] && operatorMap[property[1]].map(op => (<option key={op} value={op}>{op}</option>))}\n                                    </Form.Control>\n                                </>\n                            }\n                            {layer && property && operator && valueCondtionalRender(property)}\n                        </Form.Group>\n                    </Form>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant='secondary' onClick={handleClose}>\n                        Close\n                    </Button>\n                    <Button variant='primary' type='submit' onClick={(e) => {\n                        handleSubmit(e);\n                        handleClose()\n                    }}>\n                        Add Layer\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n}\n\nexport default PropertyFilterModal;","/**\n * This is a list of all standard operations where the turf library is used. This file has \n * performs no actions or modifies any data. In the operation list, each operation is \n * standardized to minimize the amount of code required to support new operations.\n *\n * To add a new turf operation to Mons GIS, one has to create a variable with the parameters:\n * - id\n * - title\n * - layerList (number of layers used in the operation)\n * - parameters (parameters and input type used in the operation)\n * - description\n * \n * This information is used to create a customized pop up with the desired input options. \n * \n * For more details on operations, check out in operationModal under components/Navbar.\n */\n\nvar buffer = {\n    id: 1,\n    title: 'Buffer',\n    layerList: ['Layer 1'],\n    parameters: { Radius: 'number' },\n    description: \"The Buffer Operation takes the features from a source vector layer and creates a buffer area of a specified distance around, storing the result on a Result Layer.\"\n}\nvar intersect = {\n    id: 2,\n    title: 'Intersect',\n    layerList: ['Layer 1', 'Layer 2'],\n    parameters: {},\n    description: \"The Intersect Operation calculates the geometric intersection of two layers.\"\n}\n\nvar union = {\n    id: 3,\n    title: 'Union',\n    layerList: ['Layer 1', 'Layer 2'],\n    parameters: {},\n    description: \"The Union Operation combines the features from two layers into a single, composite layer.\"\n}\n\nvar difference = {\n    id: 4,\n    title: 'Difference',\n    layerList: ['Layer 1', 'Layer 2'],\n    parameters: {},\n    description: \"The Difference Operation finds the difference between two polygons by clipping the second polygon from the first.\"\n}\nvar difference = {\n    id: 5,\n    title: 'Clustering',\n    layerList: ['Layer 1'],\n    parameters: { 'Number of Clusters': 'number' },\n    description: \"The Clustering Operation takes a collection of points and returns the resulting K means clusters. The number of clusters required depends on your applicaiton.\"\n}\n\nconst OperationList = [buffer, intersect, union, difference]\n\nexport default OperationList","/**\n * A simple component for listing all operations Mons GIS supports.\n * \n * This component manages the dropdown of operations visible to the user, and passes\n * information further down the component-tree.\n * \n * [Very similar to Layers.js]\n */\n\nimport React, { useState } from 'react'\nimport { Row, Col } from 'react-bootstrap'\nimport { RiArrowDropDownLine, RiArrowDropRightLine } from 'react-icons/ri'\nimport { FaTools } from 'react-icons/fa'\n\nimport OperationModal from './OperationModal'\nimport PropertyFilterModal from './PropertyFilterModal'\nimport OperationList from '../../../helpers/OperationList'\n\nconst Operations = ({ lrs, addLayer }) => {\n    const [dropdown, toggleDropdown] = useState(false)\n    return (\n        <>\n            <Row >\n                <Col md={1}><FaTools /></Col>\n                <Col md={7} onClick={() => toggleDropdown(!dropdown)}>\n                    <h5>Operations</h5>\n                </Col>\n                <Col md={3}>{dropdown\n                    ? <RiArrowDropDownLine size={20} onClick={() => toggleDropdown(!dropdown)} />\n                    : <RiArrowDropRightLine size={20} onClick={() => toggleDropdown(!dropdown)} />}\n                </Col>\n            </Row>\n            {\n                dropdown && OperationList.map(op => (\n                    <OperationModal key={op.id} operation={op} lrs={lrs} addLayer={addLayer} />\n                ))\n            }\n            {dropdown && <PropertyFilterModal lrs={lrs} addLayer={addLayer} />}\n        </>\n    )\n}\n\nexport default Operations","import React from 'react'\nimport { Container, Col } from \"react-bootstrap\"\nimport Upload from \"./Upload/Upload\"\nimport NavHeader from \"./NavHeader\"\nimport Layers from \"./Layers/Layers\"\nimport Operations from \"./Operations/Operations\"\n\nconst navStyle = {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    width: \"100%\",\n    background: \"white\",\n    color: \"black\",\n    padding: \"1em\",\n    margin: 10,\n    zIndex: \"1\",\n}\n\nconst NavBar = ({ map, lrs, addLayer, removeLayer }) => {\n\n    return (\n        <>\n            <Col md={3}>\n                <Container style={navStyle}>\n                    <NavHeader />\n                    <Operations lrs={lrs} addLayer={addLayer} />\n                    <Layers map={map} lrs={lrs} removeLayer={removeLayer} />\n                    <Upload addLayer={addLayer} />\n                </Container>\n            </Col>\n        </>\n    )\n}\nexport default NavBar","/*\nThis file returns the styling of a layer depending on the types of features the layer consists of.\n*/\n\nconst constructLayer = (layer) => {\n    var pointLayer = {\n        'id': layer.id,\n        'type': 'symbol',\n        'source': layer.id,\n        'layout': {\n            visibility: 'visible',\n            'icon-size': 10\n        },\n        'paint': {\n            'icon-color': layer.color\n        }\n    }\n    var lineLayer = {\n        'id': layer.id,\n        'type': 'line',\n        'source': layer.id,\n        'layout': {\n            visibility: 'visible'\n        },\n        'paint': {\n            'line-color': layer.color,\n            'line-width': 0.6\n        }\n    }\n    var polygonLayer = {\n        'id': layer.id,\n        'type': 'fill',\n        'source': layer.id,\n        'layout': {\n            visibility: 'visible'\n        },\n        'paint': {\n            'fill-color': layer.color,\n            'fill-opacity': 0.6\n        }\n    }\n    if (layer.data.type === 'FeatureCollection') {\n        console.log(\"FC construct layer\", layer)\n        switch (layer.data.features[0].geometry.type) {\n            case 'Point':\n            case 'MultiPoint':\n                console.log(\"point case\")\n                return pointLayer;\n            case 'Line':\n            case 'LineString':\n            case 'MultiLineString':\n                return lineLayer;\n            case 'Polygon':\n            case 'MultiPolygon':\n                return polygonLayer;\n            default:\n                return polygonLayer;\n        }\n    } else if (layer.data.type === 'Feature') {\n        console.log(\"Feature construct layer\", layer)\n        switch (layer.data.geometry.type) {\n            case 'Point':\n            case 'MultiPoint':\n                return pointLayer;\n            case 'Line':\n            case 'LineString':\n            case 'MultiLineString':\n                return lineLayer;\n            case 'Polygon':\n            case 'MultiPolygon':\n                return polygonLayer;\n            default:\n                return polygonLayer;\n        }\n    }\n    else {\n        return polygonLayer\n    }\n}\n\nexport default constructLayer;","/**\n * This is the website's main file, which creates the map and manages layers.\n * \n * To summerize:\n * Maps and menus are given a defualt styling. \n * The basemap is set/managed in this file.\n * The map is initialized\n * Layers are added and removed\n * \n * Serves as the parent to all other components in the application.\n * \n * Distributes information to the navigation bar.\n */\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport NavBar from \"./NavBar/NavBar.js\"\n\nimport constructLayer from './../helpers/constructLayer'\n\nconst mapStyle = {\n\tposition: \"absolute\",\n\ttop: 0,\n\tbottom: 0,\n\tright: 0,\n\tleft: 0,\n\tzIndex: \"-1\",\n};\n\nconst menuStyle = {\n\tposition: \"absolute\",\n\ttop: 0,\n\tright: 0,\n\tmargin: 10,\n\tpadding: 10,\n\tbackground: \"white\",\n\tzIndex: \"1\",\n\tdisplay: \"flex\",\n};\n\nconst backgroundLayers = [\n\t{ id: \"streets-v11\", name: \"Streets\" },\n\t{ id: \"light-v10\", name: \"Light\" },\n\t{ id: \"dark-v10\", name: \"Dark\" },\n\t{ id: \"satellite-v9\", name: \"Satellite\" },\n];\n\nmapboxgl.accessToken = \"pk.eyJ1IjoibW9uc2VtIiwiYSI6ImNraG4yc2syaTBiZ24ydGwxOTg0ZnJiMG0ifQ.B3OT7lkRhmt4w5lTa9fJ2w\"\n\nconst Map = () => {\n\tconst [map, setMap] = useState(null)\n\tconst [backgroundLayerID, setbackgroundLayerID] = useState(\"streets-v11\");\n\tconst [layers, setLayers] = useState([])\n\tconst mapContainer = useRef(null)\n\n\tuseEffect(() => {\n\t\tconst initializeMap = ({ setMap, mapContainer }) => {\n\t\t\tconst map = new mapboxgl.Map({\n\t\t\t\tcontainer: mapContainer.current,\n\t\t\t\tstyle: \"mapbox://styles/mapbox/streets-v11\", // stylesheet location\n\t\t\t\tcenter: [10.3856, 63.4292],\n\t\t\t\tzoom: 12.2\n\t\t\t});\n\t\t\tmap.on(\"load\", () => {\n\t\t\t\tsetMap(map);\n\t\t\t\tmap.resize();\n\t\t\t});\n\t\t};\n\n\t\tif (!map) initializeMap({ setMap, mapContainer });\n\t\tif (map) map.setStyle(\"mapbox://styles/mapbox/\" + backgroundLayerID);\n\t}, [backgroundLayerID, map]);\n\n\tuseEffect(() => {\n\t\tconst updateMap = (map, layers) => {\n\t\t\tlayers.filter((l) => !l.addedToMap)\n\t\t\t\t.forEach((layer) => {\n\t\t\t\t\tmap.addSource(layer.id, {\n\t\t\t\t\t\t'type': 'geojson',\n\t\t\t\t\t\t'data': layer.data\n\t\t\t\t\t});\n\t\t\t\t\tmap.addLayer(constructLayer(layer));\n\t\t\t\t\tlayer.addedToMap = true;\n\t\t\t\t})\n\t\t}\n\t\tif (map && layers) updateMap(map, layers)\n\t}, [layers, map])\n\n\n\tconst addLayerToState = (layer) => {\n\t\tsetLayers((oldLayers) => [...oldLayers, layer]);\n\t}\n\tconst removeLayerFromState = (layerId) => {\n\t\tmap.removeLayer(layerId);\n\t\tmap.removeSource(layerId);\n\t\tsetLayers(layers => layers.filter(layer => layer.id !== layerId))\n\t}\n\tconst removeAllLayers = () => {\n\t\tsetLayers([])\n\t}\n\tconst toggleVisibility = (layerId) => {\n\t\tconst visibility = map.getLayoutProperty(layerId, \"visibility\");\n\t\tif (visibility === 'visible') {\n\t\t\tmap.setLayoutProperty(layerId, 'visibility', 'none');\n\t\t} else {\n\t\t\tmap.setLayoutProperty(layerId, 'visibility', 'visible')\n\t\t}\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<NavBar map={map} lrs={layers} addLayer={addLayerToState} removeLayer={removeLayerFromState} toggleVisibility={toggleVisibility} />\n\t\t\t<div style={menuStyle}>\n\t\t\t\t{backgroundLayers.map((backgroundLayer) => (\n\t\t\t\t\t<div key={backgroundLayer.id} style={{ margin: 4 }}>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tid={backgroundLayer.id}\n\t\t\t\t\t\t\ttype=\"radio\"\n\t\t\t\t\t\t\tname=\"rtoggle\"\n\t\t\t\t\t\t\tvalue={backgroundLayer.id}\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tsetbackgroundLayerID(backgroundLayer.id);\n\t\t\t\t\t\t\t\tremoveAllLayers()\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tdefaultChecked={backgroundLayer.id === backgroundLayerID}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<label style={{ margin: 2 }}>{backgroundLayer.name}</label>\n\t\t\t\t\t</div>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t\t<div ref={(el) => (mapContainer.current = el)} style={mapStyle} />\n\t\t</div>\n\t)\n\n}\nexport default Map;","import 'bootstrap/dist/css/bootstrap.min.css';\nimport Map from \"./components/Map\"\n\nfunction App() {\n\treturn (\n\t\t<div>\n\t\t\t<Map />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from \"./App\"\n\nclass Application extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<App />\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nReactDOM.render(<Application />, document.getElementById('app'));"],"sourceRoot":""}